imports: {}
exports:
  - Accumulate
parts:
  Accumulate:
    id: Accumulate
    inputs:
      count:
        mode: required
        type: any
      val:
        mode: optional
        type: any
    outputs:
      r:
        type: any
    completionOutputs:
      - r
    reactiveInputs:
      - val
    fnCode: |-
      const {count, val} = inputs;
      const {r} = outputs;

      const {state} = adv;

      let list = state.get("list") || [];

      if (count !== state.get("count")) {
          list = [];
          state.set("count", count);
      }

      if (isDefined(val)) {
          list.push(val);
      }


      state.set("list", list);

      if (list.length === state.get("count")) {
          r.next(list);
      }
exposedFunctionality: []
