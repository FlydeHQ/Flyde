export const macroBundlesContent = {"CodeExpression":"/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Values/CodeExpression.tsx":
/*!***************************************!*\
  !*** ./src/Values/CodeExpression.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nconst getInlineVariables_1 = __webpack_require__(/*! ./getInlineVariables */ \"./src/Values/getInlineVariables.ts\");\nconst labelMaxLength = 20;\nfunction valToLabel(val) {\n    try {\n        const label = JSON.stringify(val);\n        if (label.length > labelMaxLength) {\n            return `${label.slice(0, labelMaxLength)}...`;\n        }\n        return label;\n    }\n    catch (e) {\n        return `Value`;\n    }\n}\nconst CodeExpressionEditor = function CodeExpressionEditor(props) {\n    var _a;\n    const { value, onChange } = props;\n    const changeValue = (0, react_1.useCallback)((_val) => {\n        const newLabel = valToLabel(_val);\n        const oldLabel = valToLabel(value.value);\n        const wasUsingDefaultLabel = value.label === oldLabel || !value.label;\n        const labelToUse = wasUsingDefaultLabel ? newLabel : value.label;\n        onChange({ ...value, value: _val, label: labelToUse });\n    }, [value, onChange]);\n    const vars = (0, getInlineVariables_1.getVariables)((_a = value.value) !== null && _a !== void 0 ? _a : \"\");\n    return (react_1.default.createElement(\"div\", null,\n        react_1.default.createElement(core_1.FormGroup, { label: \"Value:\", helperText: `Accepts any valid JS extension. ` },\n            react_1.default.createElement(core_1.TextArea, { value: value.value, fill: true, onChange: (e) => changeValue(e.target.value) })),\n        react_1.default.createElement(\"div\", null, vars.length > 0 ? (react_1.default.createElement(\"small\", null,\n            \"External inputs exposed from this expression:\",\n            \" \",\n            react_1.default.createElement(\"em\", null, vars.join(\", \")))) : (react_1.default.createElement(\"small\", null, \"Expose external inputs by using the \\\"inputs\\\" object. For example, \\\"inputs.a + inputs.b\\\" will expose 2 inputs, a and b, and sum them.\"))),\n        react_1.default.createElement(core_1.FormGroup, { label: \"Label:\" },\n            react_1.default.createElement(core_1.InputGroup, { type: \"text\", value: value.label, onChange: (e) => onChange({ ...value, label: e.target.value }), placeholder: \"Code Expression\" }))));\n};\nexports[\"default\"] = CodeExpressionEditor;\n\n\n//# sourceURL=webpack://__MacroNode__CodeExpression/./src/Values/CodeExpression.tsx?");

/***/ }),

/***/ "./src/Values/getInlineVariables.ts":
/*!******************************************!*\
  !*** ./src/Values/getInlineVariables.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getVariables = void 0;\nconst getVariables = (code) => {\n    return (code.match(/inputs\\.([a-zA-Z]\\w*)/g) || []).map((v) => v.replace(/inputs\\./, \"\"));\n};\nexports.getVariables = getVariables;\n\n\n//# sourceURL=webpack://__MacroNode__CodeExpression/./src/Values/getInlineVariables.ts?");

/***/ }),

/***/ "@blueprintjs/core":
/*!****************************!*\
  !*** external "Blueprint" ***!
  \****************************/
/***/ ((module) => {

module.exports = window["Blueprint"];

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

module.exports = window["React"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Values/CodeExpression.tsx");
/******/ 	window.__MacroNode__CodeExpression = __webpack_exports__;
/******/ 	
/******/ })()
;","Collect":"/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Lists/Collect/Collect.tsx":
/*!***************************************!*\
  !*** ./src/Lists/Collect/Collect.tsx ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\nconst ConfigurableInputEditor_1 = __webpack_require__(/*! ../../lib/ConfigurableInputEditor */ \"./src/lib/ConfigurableInputEditor.tsx\");\nconst defaultValuePerStrategy = {\n    count: {\n        strategy: \"count\",\n        count: { mode: \"static\", value: 2 },\n    },\n    time: {\n        strategy: \"time\",\n        time: { mode: \"static\", value: 2000 },\n    },\n    trigger: {\n        strategy: \"trigger\",\n    },\n};\nconst CollectEditor = function CollectEditor({ value, onChange, }) {\n    const handleStrategyChange = react_1.default.useCallback((e) => {\n        const strategy = e.currentTarget.value;\n        const defaultValue = defaultValuePerStrategy[strategy];\n        onChange(defaultValue);\n    }, [onChange, value]);\n    const innerEditor = react_1.default.useMemo(() => {\n        switch (value.strategy) {\n            case \"count\":\n                return (react_1.default.createElement(ConfigurableInputEditor_1.ConfigurableInputEditor, { value: value.count, onChange: (count) => onChange({ ...value, count }), valueRenderer: (props) => (react_1.default.createElement(core_1.FormGroup, { label: \"Count:\", inline: true },\n                        react_1.default.createElement(core_1.NumericInput, { value: props.value, onValueChange: (e) => onChange({\n                                ...value,\n                                count: { mode: \"static\", value: e },\n                            }) }))), modeLabel: \"Count mode:\", defaultStaticValue: 2 }));\n            case \"time\":\n                return (react_1.default.createElement(ConfigurableInputEditor_1.ConfigurableInputEditor, { value: value.time, onChange: (time) => onChange({ ...value, time }), valueRenderer: (props) => (react_1.default.createElement(core_1.FormGroup, { label: \"Time:\", inline: true },\n                        react_1.default.createElement(core_1.NumericInput, { value: props.value, onValueChange: (e) => onChange({\n                                ...value,\n                                time: { mode: \"static\", value: e },\n                            }) }))), modeLabel: \"Time mode:\", defaultStaticValue: 2000 }));\n        }\n    }, [value, onChange]);\n    return (react_1.default.createElement(react_1.default.Fragment, null,\n        react_1.default.createElement(core_1.RadioGroup, { label: \"Collection strategy:\", onChange: handleStrategyChange, selectedValue: value.strategy, inline: true },\n            react_1.default.createElement(core_1.Radio, { label: \"Count\", value: \"count\" }),\n            react_1.default.createElement(core_1.Radio, { label: \"Time\", value: \"time\" }),\n            react_1.default.createElement(core_1.Radio, { label: \"Dynamic\", value: \"trigger\" })),\n        innerEditor));\n};\nexports[\"default\"] = CollectEditor;\n\n\n//# sourceURL=webpack://__MacroNode__Collect/./src/Lists/Collect/Collect.tsx?");

/***/ }),

/***/ "./src/lib/ConfigurableInputEditor.tsx":
/*!*********************************************!*\
  !*** ./src/lib/ConfigurableInputEditor.tsx ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createConfigurableInputEditor = exports.ConfigurableInputEditor = void 0;\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst react_1 = __importDefault(__webpack_require__(/*! react */ \"react\"));\nconst ConfigurableInputEditor = function ({ value, onChange, valueRenderer: ValueRenderer, defaultStaticValue, modeLabel, }) {\n    const handleModeChange = (e) => {\n        onChange({\n            mode: e.currentTarget.value,\n            value: e.currentTarget.value === \"static\" ? defaultStaticValue : undefined,\n        });\n    };\n    const handleValueChange = (value) => {\n        onChange({\n            value,\n            mode: \"static\",\n        });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const MemoValueRenderer = react_1.default.useMemo(() => ValueRenderer, []);\n    return (react_1.default.createElement(react_1.default.Fragment, null,\n        react_1.default.createElement(core_1.RadioGroup, { label: modeLabel, onChange: handleModeChange, selectedValue: value.mode, inline: true },\n            react_1.default.createElement(core_1.Radio, { label: \"Static\", value: \"static\" }),\n            react_1.default.createElement(core_1.Radio, { label: \"Dynamic\", value: \"dynamic\" })),\n        value.mode === \"static\" ? (react_1.default.createElement(MemoValueRenderer, { value: value.value, onChange: handleValueChange })) : null));\n};\nexports.ConfigurableInputEditor = ConfigurableInputEditor;\nconst createConfigurableInputEditor = (valueRenderer) => {\n    return (props) => (react_1.default.createElement(exports.ConfigurableInputEditor, { ...props, valueRenderer: valueRenderer }));\n};\nexports.createConfigurableInputEditor = createConfigurableInputEditor;\n\n\n//# sourceURL=webpack://__MacroNode__Collect/./src/lib/ConfigurableInputEditor.tsx?");

/***/ }),

/***/ "@blueprintjs/core":
/*!****************************!*\
  !*** external "Blueprint" ***!
  \****************************/
/***/ ((module) => {

module.exports = window["Blueprint"];

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

module.exports = window["React"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Lists/Collect/Collect.tsx");
/******/ 	window.__MacroNode__Collect = __webpack_exports__;
/******/ 	
/******/ })()
;","Conditional":"/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../node_modules/.pnpm/pubsub-js@1.9.4/node_modules/pubsub-js/src/pubsub.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/pubsub-js@1.9.4/node_modules/pubsub-js/src/pubsub.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n/**\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\n * License: MIT - http://mrgnrdrck.mit-license.org\n *\n * https://github.com/mroderick/PubSubJS\n */\n\n(function (root, factory){\n    'use strict';\n\n    var PubSub = {};\n\n    if (root.PubSub) {\n        PubSub = root.PubSub;\n        console.warn(\"PubSub already loaded, using existing version\");\n    } else {\n        root.PubSub = PubSub;\n        factory(PubSub);\n    }\n    // CommonJS and Node.js module support\n    if (true){\n        if (module !== undefined && module.exports) {\n            exports = module.exports = PubSub; // Node.js specific `module.exports`\n        }\n        exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n        module.exports = exports = PubSub; // CommonJS\n    }\n    // AMD support\n    /* eslint-disable no-undef */\n    else {}\n\n}(( typeof window === 'object' && window ) || this, function (PubSub){\n    'use strict';\n\n    var messages = {},\n        lastUid = -1,\n        ALL_SUBSCRIBING_MSG = '*';\n\n    function hasKeys(obj){\n        var key;\n\n        for (key in obj){\n            if ( Object.prototype.hasOwnProperty.call(obj, key) ){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a function that throws the passed exception, for use as argument for setTimeout\n     * @alias throwException\n     * @function\n     * @param { Object } ex An Error object\n     */\n    function throwException( ex ){\n        return function reThrowException(){\n            throw ex;\n        };\n    }\n\n    function callSubscriberWithDelayedExceptions( subscriber, message, data ){\n        try {\n            subscriber( message, data );\n        } catch( ex ){\n            setTimeout( throwException( ex ), 0);\n        }\n    }\n\n    function callSubscriberWithImmediateExceptions( subscriber, message, data ){\n        subscriber( message, data );\n    }\n\n    function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){\n        var subscribers = messages[matchedMessage],\n            callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n            s;\n\n        if ( !Object.prototype.hasOwnProperty.call( messages, matchedMessage ) ) {\n            return;\n        }\n\n        for (s in subscribers){\n            if ( Object.prototype.hasOwnProperty.call(subscribers, s)){\n                callSubscriber( subscribers[s], originalMessage, data );\n            }\n        }\n    }\n\n    function createDeliveryFunction( message, data, immediateExceptions ){\n        return function deliverNamespaced(){\n            var topic = String( message ),\n                position = topic.lastIndexOf( '.' );\n\n            // deliver the message as it is now\n            deliverMessage(message, message, data, immediateExceptions);\n\n            // trim the hierarchy and deliver message to each level\n            while( position !== -1 ){\n                topic = topic.substr( 0, position );\n                position = topic.lastIndexOf('.');\n                deliverMessage( message, topic, data, immediateExceptions );\n            }\n\n            deliverMessage(message, ALL_SUBSCRIBING_MSG, data, immediateExceptions);\n        };\n    }\n\n    function hasDirectSubscribersFor( message ) {\n        var topic = String( message ),\n            found = Boolean(Object.prototype.hasOwnProperty.call( messages, topic ) && hasKeys(messages[topic]));\n\n        return found;\n    }\n\n    function messageHasSubscribers( message ){\n        var topic = String( message ),\n            found = hasDirectSubscribersFor(topic) || hasDirectSubscribersFor(ALL_SUBSCRIBING_MSG),\n            position = topic.lastIndexOf( '.' );\n\n        while ( !found && position !== -1 ){\n            topic = topic.substr( 0, position );\n            position = topic.lastIndexOf( '.' );\n            found = hasDirectSubscribersFor(topic);\n        }\n\n        return found;\n    }\n\n    function publish( message, data, sync, immediateExceptions ){\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        var deliver = createDeliveryFunction( message, data, immediateExceptions ),\n            hasSubscribers = messageHasSubscribers( message );\n\n        if ( !hasSubscribers ){\n            return false;\n        }\n\n        if ( sync === true ){\n            deliver();\n        } else {\n            setTimeout( deliver, 0 );\n        }\n        return true;\n    }\n\n    /**\n     * Publishes the message, passing the data to it's subscribers\n     * @function\n     * @alias publish\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publish = function( message, data ){\n        return publish( message, data, false, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Publishes the message synchronously, passing the data to it's subscribers\n     * @function\n     * @alias publishSync\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publishSync = function( message, data ){\n        return publish( message, data, true, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\n     * @function\n     * @alias subscribe\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { String }\n     */\n    PubSub.subscribe = function( message, func ){\n        if ( typeof func !== 'function'){\n            return false;\n        }\n\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        // message is not registered yet\n        if ( !Object.prototype.hasOwnProperty.call( messages, message ) ){\n            messages[message] = {};\n        }\n\n        // forcing token as String, to allow for future expansions without breaking usage\n        // and allow for easy use as key names for the 'messages' object\n        var token = 'uid_' + String(++lastUid);\n        messages[message][token] = func;\n\n        // return token for unsubscribing\n        return token;\n    };\n\n    PubSub.subscribeAll = function( func ){\n        return PubSub.subscribe(ALL_SUBSCRIBING_MSG, func);\n    };\n\n    /**\n     * Subscribes the passed function to the passed message once\n     * @function\n     * @alias subscribeOnce\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { PubSub }\n     */\n    PubSub.subscribeOnce = function( message, func ){\n        var token = PubSub.subscribe( message, function(){\n            // before func apply, unsubscribe message\n            PubSub.unsubscribe( token );\n            func.apply( this, arguments );\n        });\n        return PubSub;\n    };\n\n    /**\n     * Clears all subscriptions\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     */\n    PubSub.clearAllSubscriptions = function clearAllSubscriptions(){\n        messages = {};\n    };\n\n    /**\n     * Clear subscriptions by the topic\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     * @return { int }\n     */\n    PubSub.clearSubscriptions = function clearSubscriptions(topic){\n        var m;\n        for (m in messages){\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0){\n                delete messages[m];\n            }\n        }\n    };\n\n    /**\n       Count subscriptions by the topic\n     * @function\n     * @public\n     * @alias countSubscriptions\n     * @return { Array }\n    */\n    PubSub.countSubscriptions = function countSubscriptions(topic){\n        var m;\n        // eslint-disable-next-line no-unused-vars\n        var token;\n        var count = 0;\n        for (m in messages) {\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0) {\n                for (token in messages[m]) {\n                    count++;\n                }\n                break;\n            }\n        }\n        return count;\n    };\n\n\n    /**\n       Gets subscriptions by the topic\n     * @function\n     * @public\n     * @alias getSubscriptions\n    */\n    PubSub.getSubscriptions = function getSubscriptions(topic){\n        var m;\n        var list = [];\n        for (m in messages){\n            if (Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0){\n                list.push(m);\n            }\n        }\n        return list;\n    };\n\n    /**\n     * Removes subscriptions\n     *\n     * - When passed a token, removes a specific subscription.\n     *\n\t * - When passed a function, removes all subscriptions for that function\n     *\n\t * - When passed a topic, removes all subscriptions for that topic (hierarchy)\n     * @function\n     * @public\n     * @alias subscribeOnce\n     * @param { String | Function } value A token, function or topic to unsubscribe from\n     * @example // Unsubscribing with a token\n     * var token = PubSub.subscribe('mytopic', myFunc);\n     * PubSub.unsubscribe(token);\n     * @example // Unsubscribing with a function\n     * PubSub.unsubscribe(myFunc);\n     * @example // Unsubscribing from a topic\n     * PubSub.unsubscribe('mytopic');\n     */\n    PubSub.unsubscribe = function(value){\n        var descendantTopicExists = function(topic) {\n                var m;\n                for ( m in messages ){\n                    if ( Object.prototype.hasOwnProperty.call(messages, m) && m.indexOf(topic) === 0 ){\n                        // a descendant of the topic exists:\n                        return true;\n                    }\n                }\n\n                return false;\n            },\n            isTopic    = typeof value === 'string' && ( Object.prototype.hasOwnProperty.call(messages, value) || descendantTopicExists(value) ),\n            isToken    = !isTopic && typeof value === 'string',\n            isFunction = typeof value === 'function',\n            result = false,\n            m, message, t;\n\n        if (isTopic){\n            PubSub.clearSubscriptions(value);\n            return;\n        }\n\n        for ( m in messages ){\n            if ( Object.prototype.hasOwnProperty.call( messages, m ) ){\n                message = messages[m];\n\n                if ( isToken && message[value] ){\n                    delete message[value];\n                    result = value;\n                    // tokens are unique, so we can just stop here\n                    break;\n                }\n\n                if (isFunction) {\n                    for ( t in message ){\n                        if (Object.prototype.hasOwnProperty.call(message, t) && message[t] === value){\n                            delete message[t];\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}));\n\n\n//# sourceURL=webpack://__MacroNode__Conditional/../node_modules/.pnpm/pubsub-js@1.9.4/node_modules/pubsub-js/src/pubsub.js?");

/***/ }),

/***/ "./src/ControlFlow/Conditional.flyde.ts":
/*!**********************************************!*\
  !*** ./src/ControlFlow/Conditional.flyde.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Conditional = exports.ConditionType = void 0;\nvar ConditionType;\n(function (ConditionType) {\n    ConditionType[\"Equal\"] = \"EQUAL\";\n    ConditionType[\"NotEqual\"] = \"NOT_EQUAL\";\n    ConditionType[\"GreaterThan\"] = \"GREATER_THAN\";\n    ConditionType[\"GreaterThanOrEqual\"] = \"GREATER_THAN_OR_EQUAL\";\n    ConditionType[\"LessThan\"] = \"LESS_THAN\";\n    ConditionType[\"LessThanOrEqual\"] = \"LESS_THAN_OR_EQUAL\";\n    ConditionType[\"Contains\"] = \"CONTAINS\";\n    ConditionType[\"NotContains\"] = \"NOT_CONTAINS\";\n    ConditionType[\"RegexMatches\"] = \"REGEX_MATCHES\";\n    ConditionType[\"IsEmpty\"] = \"IS_EMPTY\";\n    ConditionType[\"IsNotEmpty\"] = \"IS_NOT_EMPTY\";\n    ConditionType[\"IsNull\"] = \"IS_NULL\";\n    ConditionType[\"IsNotNull\"] = \"IS_NOT_NULL\";\n    ConditionType[\"IsUndefined\"] = \"IS_UNDEFINED\";\n    ConditionType[\"IsNotUndefined\"] = \"IS_NOT_UNDEFINED\";\n    ConditionType[\"HasProperty\"] = \"HAS_PROPERTY\";\n    ConditionType[\"LengthEqual\"] = \"LENGTH_EQUAL\";\n    ConditionType[\"LengthNotEqual\"] = \"LENGTH_NOT_EQUAL\";\n    ConditionType[\"LengthGreaterThan\"] = \"LENGTH_GREATER_THAN\";\n    ConditionType[\"LengthLessThan\"] = \"LENGTH_LESS_THAN\";\n    ConditionType[\"TypeEquals\"] = \"TYPE_EQUALS\";\n    ConditionType[\"Expression\"] = \"EXPRESSION\";\n})(ConditionType = exports.ConditionType || (exports.ConditionType = {}));\nexports.Conditional = {\n    id: \"Conditional\",\n    namespace: \"Control Flow\",\n    description: \"Evaluates a condition and emits the value of the matching case\",\n    defaultStyle: {\n        icon: \"circle-question\",\n    },\n    runFnBuilder: (config) => {\n        return (inputs, outputs, adv) => {\n            const { compareTo: argType, propertyPath, condition, trueValue, falseValue, } = config;\n            const { true: trueOutput, false: falseOutput } = outputs;\n            const comparedValue = argType.mode === \"static\" ? argType.value : inputs.compareTo;\n            const leftSide = propertyPath\n                ? getProperty(inputs.value, propertyPath)\n                : inputs.value;\n            const rightSide = config.compareTo.mode === \"dynamic\" && config.compareTo.propertyPath\n                ? getProperty(comparedValue, config.compareTo.propertyPath)\n                : comparedValue;\n            const result = calculateCondition(leftSide, rightSide, condition);\n            const outputToUse = result ? trueOutput : falseOutput;\n            const configToUse = result ? trueValue : falseValue;\n            if (configToUse.type === \"value\") {\n                outputToUse.next(inputs.value);\n            }\n            else if (configToUse.type === \"compareTo\") {\n                outputToUse.next(comparedValue);\n            }\n            else if (configToUse.type === \"expression\") {\n                const expression = configToUse.data;\n                try {\n                    const fnStr = `(value, compareTo) => ${expression}`;\n                    const fn = eval(fnStr);\n                    outputToUse.next(fn(inputs.value, comparedValue));\n                }\n                catch (e) {\n                    adv.onError(e);\n                }\n            }\n            else {\n                throw new Error(`Unknown type ${configToUse.type}`);\n            }\n        };\n    },\n    definitionBuilder: (config) => {\n        const inputs = [\"value\"];\n        if (config.compareTo.mode === \"dynamic\") {\n            inputs.push(\"compareTo\");\n        }\n        const outputs = {\n            true: {\n                description: \"Emits the value if the condition is true\",\n            },\n            false: {\n                description: \"Emits the value if the condition is false\",\n            },\n        };\n        return {\n            displayName: \"Conditional\",\n            description: \"Evaluates a condition and emits the value of the matching case\",\n            inputs: Object.fromEntries(inputs.map((input) => [input, {}])),\n            outputs,\n        };\n    },\n    defaultData: {\n        compareTo: { mode: \"dynamic\", propertyPath: \"\" },\n        propertyPath: \"\",\n        condition: {\n            type: ConditionType.Equal,\n        },\n        trueValue: {\n            type: \"value\",\n        },\n        falseValue: {\n            type: \"value\",\n        },\n    },\n    editorConfig: {\n        type: \"custom\",\n        editorComponentBundlePath: \"../../../dist/ui/Conditional.js\",\n    },\n};\nfunction calculateCondition(val1, val2, condition) {\n    switch (condition.type) {\n        case ConditionType.Equal:\n            return val1 === val2;\n        case ConditionType.NotEqual:\n            return val1 !== val2;\n        case ConditionType.GreaterThan:\n            return val1 > val2;\n        case ConditionType.GreaterThanOrEqual:\n            return val1 >= val2;\n        case ConditionType.LessThan:\n            return val1 < val2;\n        case ConditionType.LessThanOrEqual:\n            return val1 <= val2;\n        case ConditionType.Contains:\n            return val1.includes(val2);\n        case ConditionType.NotContains:\n            return !val1.includes(val2);\n        case ConditionType.IsEmpty:\n            return val1 === \"\";\n        case ConditionType.IsNotEmpty:\n            return val1 !== \"\";\n        case ConditionType.IsNull:\n            return val1 === null;\n        case ConditionType.IsNotNull:\n            return val1 !== null;\n        case ConditionType.IsUndefined:\n            return typeof val1 === \"undefined\";\n        case ConditionType.IsNotUndefined:\n            return typeof val1 !== \"undefined\";\n        case ConditionType.HasProperty:\n            return val1.hasOwnProperty(val2);\n        case ConditionType.LengthEqual:\n            return val1.length === val2;\n        case ConditionType.LengthNotEqual:\n            return val1.length !== val2;\n        case ConditionType.LengthGreaterThan:\n            return val1.length > val2;\n        case ConditionType.LengthLessThan:\n            return val1.length < val2;\n        case ConditionType.TypeEquals:\n            return typeof val1 === val2;\n        case ConditionType.RegexMatches: {\n            return new RegExp(val1).test(val2);\n        }\n        case ConditionType.Expression: {\n            try {\n                const fnStr = `(value, compareTo) => ${condition.data}`;\n                const fn = eval(fnStr);\n                return fn(val1, val2);\n            }\n            catch (e) {\n                console.error(e);\n                return false;\n            }\n        }\n    }\n}\nfunction getProperty(obj, path) {\n    const parts = path.split(\".\").filter((p) => p !== \"\");\n    let curr = obj;\n    for (const part of parts) {\n        if (part) {\n        }\n        curr = curr[part];\n    }\n    return curr;\n}\n\n\n//# sourceURL=webpack://__MacroNode__Conditional/./src/ControlFlow/Conditional.flyde.ts?");

/***/ }),

/***/ "./src/ControlFlow/Conditional.tsx":
/*!*****************************************!*\
  !*** ./src/ControlFlow/Conditional.tsx ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst ControlFlow_flyde_1 = __webpack_require__(/*! ./ControlFlow.flyde */ \"./src/ControlFlow/ControlFlow.flyde.ts\");\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nconst SimpleJsonEditor_1 = __webpack_require__(/*! ../lib/SimpleJsonEditor */ \"./src/lib/SimpleJsonEditor.tsx\");\nconst conditionEnumToLabel = {\n    [ControlFlow_flyde_1.ConditionType.Equal]: \"Equal\",\n    [ControlFlow_flyde_1.ConditionType.NotEqual]: \"Not Equal\",\n    [ControlFlow_flyde_1.ConditionType.GreaterThan]: \"Greater Than\",\n    [ControlFlow_flyde_1.ConditionType.GreaterThanOrEqual]: \"Greater Than Or Equal\",\n    [ControlFlow_flyde_1.ConditionType.LessThan]: \"Less Than\",\n    [ControlFlow_flyde_1.ConditionType.LessThanOrEqual]: \"Less Than Or Equal\",\n    [ControlFlow_flyde_1.ConditionType.Expression]: \"JS Expression\",\n    [ControlFlow_flyde_1.ConditionType.RegexMatches]: \"Regex Matches\",\n    [ControlFlow_flyde_1.ConditionType.Contains]: \"Contains\",\n    [ControlFlow_flyde_1.ConditionType.NotContains]: \"Not Contains\",\n    [ControlFlow_flyde_1.ConditionType.IsEmpty]: \"Is Empty\",\n    [ControlFlow_flyde_1.ConditionType.IsNotEmpty]: \"Is Not Empty\",\n    [ControlFlow_flyde_1.ConditionType.IsNull]: \"Is Null\",\n    [ControlFlow_flyde_1.ConditionType.IsNotNull]: \"Is Not Null\",\n    [ControlFlow_flyde_1.ConditionType.IsUndefined]: \"Is Undefined\",\n    [ControlFlow_flyde_1.ConditionType.IsNotUndefined]: \"Is Not Undefined\",\n    [ControlFlow_flyde_1.ConditionType.HasProperty]: \"Has Property\",\n    [ControlFlow_flyde_1.ConditionType.LengthEqual]: \"Length Equal\",\n    [ControlFlow_flyde_1.ConditionType.LengthNotEqual]: \"Length Not Equal\",\n    [ControlFlow_flyde_1.ConditionType.LengthGreaterThan]: \"Length Greater Than\",\n    [ControlFlow_flyde_1.ConditionType.LengthLessThan]: \"Length Less Than\",\n    [ControlFlow_flyde_1.ConditionType.TypeEquals]: \"Type Equals\",\n};\nconst ConditionalEditor = function ConditionalEditor(props) {\n    const { value, onChange } = props;\n    const [usePropPathValue, setUsePropPathValue] = react_1.default.useState(value.propertyPath !== \"\");\n    const [usePropPathCompareTo, setUsePropPathCompareTo] = react_1.default.useState(value.compareTo.mode === \"dynamic\" && value.compareTo.propertyPath !== \"\");\n    const maybeCompareToEditor = (0, react_1.useMemo)(() => {\n        if (value.compareTo.mode !== \"static\") {\n            return null;\n        }\n        switch (value.compareTo.type) {\n            case \"string\": {\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Expected value\" },\n                    react_1.default.createElement(core_1.InputGroup, { value: value.compareTo.value, onChange: (e) => onChange({\n                            ...value,\n                            compareTo: {\n                                mode: \"static\",\n                                type: \"string\",\n                                value: e.target.value,\n                            },\n                        }) })));\n            }\n            case \"number\": {\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Expected value\" },\n                    react_1.default.createElement(core_1.NumericInput, { value: value.compareTo.value, onValueChange: (e) => onChange({\n                            ...value,\n                            compareTo: {\n                                mode: \"static\",\n                                type: \"number\",\n                                value: e,\n                            },\n                        }) })));\n            }\n            case \"json\": {\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Expected value\", helperText: `Any JS expression is valid here. You may use \"value\" and \"compareTo\" variables in your expression.` },\n                    react_1.default.createElement(SimpleJsonEditor_1.SimpleJsonEditor, { value: value.compareTo.value, onChange: (val) => {\n                            onChange({\n                                ...value,\n                                compareTo: {\n                                    mode: \"static\",\n                                    type: \"json\",\n                                    value: val,\n                                },\n                            });\n                        }, label: \"Expected Value\" })));\n            }\n        }\n    }, [value]);\n    return (react_1.default.createElement(react_1.default.Fragment, null,\n        react_1.default.createElement(core_1.FormGroup, { label: \"Condition Type\", inline: true },\n            react_1.default.createElement(core_1.HTMLSelect, { fill: true, value: value.condition.type, onChange: (e) => onChange({\n                    ...value,\n                    condition: {\n                        type: e.target.value,\n                        data: e.target.value === ControlFlow_flyde_1.ConditionType.Expression\n                            ? \"value / compareTo === 42\"\n                            : undefined,\n                    },\n                }) }, Object.entries(conditionEnumToLabel).map(([value, label]) => (react_1.default.createElement(\"option\", { key: value, value: value }, label))))),\n        value.condition.type === ControlFlow_flyde_1.ConditionType.Expression && (react_1.default.createElement(core_1.FormGroup, { label: \"Condition expression\", helperText: `Any JS expression is valid here. You may use \"value\" and \"compareTo\" variables in your expression.` },\n            react_1.default.createElement(core_1.InputGroup, { value: value.condition.data, onChange: (e) => onChange({\n                    ...value,\n                    condition: {\n                        type: ControlFlow_flyde_1.ConditionType.Expression,\n                        data: e.target.value,\n                    },\n                }) }))),\n        react_1.default.createElement(core_1.Divider, null),\n        react_1.default.createElement(core_1.FormGroup, { label: \"Value to compare mode:\", inline: true },\n            react_1.default.createElement(core_1.HTMLSelect, { value: value.compareTo.mode, onChange: (e) => onChange({\n                    ...value,\n                    compareTo: {\n                        mode: e.target.value,\n                        value: e.target.value === \"static\" ? \"\" : undefined,\n                        type: e.target.value === \"static\" ? \"string\" : undefined,\n                    },\n                }) },\n                react_1.default.createElement(\"option\", { value: \"static\" }, \"Static\"),\n                react_1.default.createElement(\"option\", { value: \"dynamic\" }, \"Dynamic (via input)\"))),\n        value.compareTo.mode === \"static\" && (react_1.default.createElement(core_1.FormGroup, { label: \"Value to compare type:\", inline: true },\n            react_1.default.createElement(core_1.HTMLSelect, { value: value.compareTo.type, onChange: (e) => onChange({\n                    ...value,\n                    compareTo: {\n                        mode: \"static\",\n                        value: e.target.value === \"string\"\n                            ? \"\"\n                            : e.target.value === \"number\"\n                                ? 0\n                                : \"value / 42 > compareTo\",\n                        type: e.target.value,\n                    },\n                }) },\n                react_1.default.createElement(\"option\", { value: \"string\" }, \"String\"),\n                react_1.default.createElement(\"option\", { value: \"number\" }, \"Number\"),\n                react_1.default.createElement(\"option\", { value: \"expression\" }, \"JS Expression\")))),\n        maybeCompareToEditor,\n        react_1.default.createElement(core_1.Divider, null),\n        react_1.default.createElement(core_1.FormGroup, { label: \"Value to emit if true\", inline: true },\n            react_1.default.createElement(core_1.HTMLSelect, { fill: true, value: value.trueValue.type, onChange: (e) => onChange({\n                    ...value,\n                    trueValue: {\n                        type: e.target.value,\n                        data: e.target.value === \"expression\"\n                            ? \"value / compareTo === 42 ? 'yes' : 'no'\"\n                            : undefined,\n                    },\n                }) },\n                react_1.default.createElement(\"option\", { value: \"value\" }, \"Value\"),\n                react_1.default.createElement(\"option\", { value: \"compareTo\" }, \"Compare to value\"),\n                react_1.default.createElement(\"option\", { value: \"expression\" }, \"Custom expression\"))),\n        value.trueValue.type === \"expression\" && (react_1.default.createElement(core_1.FormGroup, { label: \"Expression to use if true:\", helperText: \"Any JS expression is valid here. You may use 'value' and 'compareTo' variables in your expression.\" },\n            react_1.default.createElement(core_1.InputGroup, { value: value.trueValue.data, onChange: (e) => {\n                    onChange({\n                        ...value,\n                        trueValue: {\n                            type: \"expression\",\n                            data: e.target.value,\n                        },\n                    });\n                } }))),\n        react_1.default.createElement(core_1.FormGroup, { label: \"Value to emit if false\", inline: true },\n            react_1.default.createElement(core_1.HTMLSelect, { fill: true, value: value.falseValue.type, onChange: (e) => onChange({\n                    ...value,\n                    falseValue: {\n                        type: e.target.value,\n                        data: e.target.value === \"expression\"\n                            ? \"value / compareTo === 42 ? 'yes' : 'no'\"\n                            : undefined,\n                    },\n                }) },\n                react_1.default.createElement(\"option\", { value: \"value\" }, \"Value\"),\n                react_1.default.createElement(\"option\", { value: \"compareTo\" }, \"Compare to value\"),\n                react_1.default.createElement(\"option\", { value: \"expression\" }, \"Custom expression\"))),\n        value.falseValue.type === \"expression\" && (react_1.default.createElement(core_1.FormGroup, { label: \"Expression to use if false:\", helperText: \"Any JS expression is valid here. You may use 'value' and 'compareTo' variables in your expression.\" },\n            react_1.default.createElement(core_1.InputGroup, { value: value.falseValue.data, onChange: (e) => {\n                    onChange({\n                        ...value,\n                        falseValue: {\n                            type: \"expression\",\n                            data: e.target.value,\n                        },\n                    });\n                } }))),\n        react_1.default.createElement(core_1.Divider, null),\n        react_1.default.createElement(core_1.FormGroup, { helperText: \"If the input value is an object or a list, you can specify a path to the property that the condition will be applied to\" },\n            react_1.default.createElement(core_1.Checkbox, { label: \"Use property path for input value\", checked: usePropPathValue, onChange: (e) => {\n                    const val = e.target.checked;\n                    setUsePropPathValue(val);\n                    onChange({\n                        ...value,\n                        propertyPath: val ? value.propertyPath : \"\",\n                    });\n                } })),\n        usePropPathValue && (react_1.default.createElement(core_1.FormGroup, { label: \"Input value property path\", helperText: \"If the input value is an object or a list, you can specify a path to the property that the condition will be applied to\" },\n            react_1.default.createElement(core_1.InputGroup, { value: value.propertyPath, onChange: (e) => onChange({\n                    ...value,\n                    propertyPath: e.target.value,\n                }) }))),\n        value.compareTo.mode === \"dynamic\" && (react_1.default.createElement(react_1.default.Fragment, null,\n            react_1.default.createElement(core_1.Divider, null),\n            react_1.default.createElement(core_1.FormGroup, { helperText: \"If the compareTo value is an object or a list, you can specify a path to the property that the condition will be applied to\" },\n                react_1.default.createElement(core_1.Checkbox, { label: \"Use property path for compareTo value\", checked: usePropPathCompareTo, onChange: (e) => {\n                        const val = e.target.checked;\n                        setUsePropPathCompareTo(val);\n                        onChange({\n                            ...value,\n                            compareTo: {\n                                mode: \"dynamic\",\n                                propertyPath: val\n                                    ? value.compareTo.mode === \"dynamic\"\n                                        ? value.compareTo.propertyPath\n                                        : \"\"\n                                    : \"\",\n                            },\n                        });\n                    } })))),\n        value.compareTo.mode === \"dynamic\" && usePropPathCompareTo && (react_1.default.createElement(core_1.FormGroup, { label: \"Compare to value property path\", helperText: \"If the compare to value is an object or a list, you can specify a path to the property that the condition will be applied to\" },\n            react_1.default.createElement(core_1.InputGroup, { value: value.compareTo.propertyPath, onChange: (e) => onChange({\n                    ...value,\n                    compareTo: {\n                        mode: \"dynamic\",\n                        propertyPath: e.target.value,\n                    },\n                }) })))));\n};\nexports[\"default\"] = ConditionalEditor;\n\n\n//# sourceURL=webpack://__MacroNode__Conditional/./src/ControlFlow/Conditional.tsx?");

/***/ }),

/***/ "./src/ControlFlow/ControlFlow.flyde.ts":
/*!**********************************************!*\
  !*** ./src/ControlFlow/ControlFlow.flyde.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EmitOnTrigger = exports.BooleanSplit = exports.Subscribe = exports.Publish = exports.RoundRobin = exports.LimitTimes = void 0;\n__exportStar(__webpack_require__(/*! ./Conditional.flyde */ \"./src/ControlFlow/Conditional.flyde.ts\"), exports);\nconst PubSub = __webpack_require__(/*! pubsub-js */ \"../node_modules/.pnpm/pubsub-js@1.9.4/node_modules/pubsub-js/src/pubsub.js\");\nconst namespace = \"Control Flow\";\nexports.LimitTimes = {\n    id: \"Limit Times\",\n    namespace,\n    description: \"Item will be emitted until the limit is reached\",\n    inputs: {\n        item: { mode: \"required\", description: \"The item to emit\" },\n        times: {\n            mode: \"required\",\n            description: \"The number of times to emit the item\",\n        },\n        reset: { mode: \"optional\", description: \"Reset the counter\" },\n    },\n    outputs: { ok: {} },\n    reactiveInputs: [\"item\", \"reset\"],\n    completionOutputs: [],\n    run: function (inputs, outputs, adv) {\n        // magic here\n        const { state } = adv;\n        const { item, times, reset } = inputs;\n        const { ok } = outputs;\n        if (typeof reset !== \"undefined\") {\n            state.set(\"val\", 0);\n            return;\n        }\n        let curr = state.get(\"val\") || 0;\n        curr++;\n        state.set(\"val\", curr);\n        if (curr >= times) {\n            adv.onError(new Error(`Limit of ${times} reached`));\n        }\n        else {\n            ok.next(item);\n        }\n    },\n};\nexports.RoundRobin = {\n    id: \"RoundRobin\",\n    defaultStyle: {\n        icon: \"rotate\",\n    },\n    displayName: \"Round Robin\",\n    namespace,\n    defaultData: { count: 3 },\n    definitionBuilder: ({ count }) => {\n        return {\n            displayName: `Round Robin ${count}`,\n            description: `Item will be emitted to one of the ${count} outputs in a round robin fashion`,\n            inputs: { value: { mode: \"required\", description: \"The value to emit\" } },\n            completionOutputs: [],\n            reactiveInputs: [\"value\"],\n            outputs: Array.from({ length: count }).reduce((obj, _, i) => ({\n                ...obj,\n                [`r${i + 1}`]: {\n                    description: `The ${i + 1} output in order to emit the value received. After emitting a value, it moves to \"r${(i + 2) % count}\"'s turn.`,\n                },\n            }), {}),\n        };\n    },\n    runFnBuilder: ({ count }) => {\n        return (inputs, _outputs, adv) => {\n            const { state } = adv;\n            const outputs = Array.from({ length: count }).map((_, i) => _outputs[`r${i + 1}`]);\n            const curr = state.get(\"curr\") || 0;\n            const o = outputs[curr];\n            const nextCurr = (curr + 1) % count;\n            state.set(\"curr\", nextCurr);\n            o.next(inputs.item);\n        };\n    },\n    editorConfig: {\n        type: \"structured\",\n        fields: [\n            {\n                type: {\n                    value: \"number\",\n                },\n                configKey: \"count\",\n                label: \"Count\",\n                defaultValue: 3,\n                allowDynamic: false,\n            },\n        ],\n    },\n};\nexports.Publish = {\n    id: \"Publish\",\n    namespace,\n    description: \"Publishes a value by a key to all listeners in the current flow. Use 'Subscribe' to listen to events.\",\n    inputs: {\n        key: {\n            mode: \"required\",\n            description: \"A key to use to subscribe to values\",\n        },\n        value: { mode: \"required\" },\n    },\n    outputs: {},\n    run: function (inputs, _, adv) {\n        // magic here\n        const nsKey = `${adv.ancestorsInsIds}__${inputs.key}`;\n        PubSub.publish(nsKey, inputs.value);\n    },\n};\nexports.Subscribe = {\n    id: \"Subscribe\",\n    namespace,\n    description: \"Subscribes to a value published by a key. Use 'Publish' to publish values.\",\n    inputs: {\n        key: {\n            mode: \"required\",\n            description: \"A key to use to subscribe to values\",\n        },\n        initial: {\n            mode: \"required-if-connected\",\n            description: \"If passed will be published has the first value\",\n        },\n    },\n    completionOutputs: [],\n    outputs: { value: { description: \"The value published by the key\" } },\n    run: function (inputs, outputs, adv) {\n        const { value } = outputs;\n        const nsKey = `${adv.ancestorsInsIds}__${inputs.key}`;\n        const token = PubSub.subscribe(nsKey, (_, data) => {\n            value.next(data);\n        });\n        if (typeof inputs.initial !== \"undefined\") {\n            value.next(inputs.initial);\n        }\n        adv.onCleanup(() => {\n            PubSub.unsubscribe(token);\n        });\n    },\n};\nexports.BooleanSplit = {\n    namespace,\n    id: \"Boolean Split\",\n    description: \"Splits a boolean value into two outputs\",\n    inputs: {\n        value: { mode: \"required\", description: \"Boolean value\" },\n        trueValue: {\n            mode: \"required-if-connected\",\n            description: \"Value to emit if the input is true. Defaults to true\",\n        },\n        falseValue: {\n            mode: \"required-if-connected\",\n            description: \"Value to emit if the input is false. Defaults to false\",\n        },\n    },\n    outputs: {\n        true: { description: \"The value is true\" },\n        false: { description: \"The value is false\" },\n    },\n    run: function (inputs, outputs) {\n        const { true: trueOutput, false: falseOutput } = outputs;\n        const { value, trueValue, falseValue } = inputs;\n        if (value) {\n            trueOutput.next(trueValue !== null && trueValue !== void 0 ? trueValue : true);\n        }\n        else {\n            falseOutput.next(falseValue !== null && falseValue !== void 0 ? falseValue : false);\n        }\n    },\n};\nexports.EmitOnTrigger = {\n    namespace,\n    id: \"Emit on Trigger\",\n    description: \"Emits the value when the trigger input receives any value\",\n    inputs: {\n        value: { mode: \"required\", description: \"The value to emit\" },\n        trigger: { mode: \"required\", description: \"The trigger to emit the value\" },\n    },\n    outputs: {\n        result: { description: \"The value emitted\" },\n    },\n    run: function (inputs, outputs) {\n        const { result } = outputs;\n        const { value, trigger } = inputs;\n        if (trigger !== undefined) {\n            result.next(value);\n        }\n    },\n};\n\n\n//# sourceURL=webpack://__MacroNode__Conditional/./src/ControlFlow/ControlFlow.flyde.ts?");

/***/ }),

/***/ "./src/lib/SimpleJsonEditor.tsx":
/*!**************************************!*\
  !*** ./src/lib/SimpleJsonEditor.tsx ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleJsonEditor = void 0;\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nfunction SimpleJsonEditor(props) {\n    const [tempDataValue, setTempDataValue] = react_1.default.useState(JSON.stringify(props.value, null, 2));\n    const [dataParseError, setDataParseError] = react_1.default.useState();\n    const onValueChange = (0, react_1.useCallback)((e) => {\n        setTempDataValue(e.target.value);\n        try {\n            const data = JSON.parse(e.target.value);\n            setDataParseError(undefined);\n            props.onChange(data);\n        }\n        catch (e) {\n            setDataParseError(e.message);\n        }\n    }, [props]);\n    return (react_1.default.createElement(core_1.FormGroup, { label: props.label, intent: dataParseError ? \"danger\" : undefined, helperText: dataParseError },\n        react_1.default.createElement(core_1.TextArea, { value: tempDataValue, fill: true, onChange: onValueChange })));\n}\nexports.SimpleJsonEditor = SimpleJsonEditor;\n\n\n//# sourceURL=webpack://__MacroNode__Conditional/./src/lib/SimpleJsonEditor.tsx?");

/***/ }),

/***/ "@blueprintjs/core":
/*!****************************!*\
  !*** external "Blueprint" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = window["Blueprint"];

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = window["React"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ControlFlow/Conditional.tsx");
/******/ 	window.__MacroNode__Conditional = __webpack_exports__;
/******/ 	
/******/ })()
;","InlineValue":"/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Values/InlineValue.tsx":
/*!************************************!*\
  !*** ./src/Values/InlineValue.tsx ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core_1 = __webpack_require__(/*! @blueprintjs/core */ \"@blueprintjs/core\");\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"react\"));\nconst types = [\n    \"string\",\n    \"number\",\n    \"json\",\n    \"boolean\",\n];\nconst defaultValuePerType = {\n    string: (currValue) => `${currValue}`,\n    number: (currValue) => isNaN(Number(currValue)) ? 0 : Number(currValue),\n    json: (currValue) => JSON.stringify(currValue),\n    boolean: (currValue) => !!currValue,\n    expression: (currValue) => currValue,\n};\nconst labelMaxLength = 20;\nfunction valToLabel(val) {\n    try {\n        const label = JSON.stringify(val);\n        if (label.length > labelMaxLength) {\n            return `${label.slice(0, labelMaxLength)}...`;\n        }\n        return label;\n    }\n    catch (e) {\n        return `Value`;\n    }\n}\nconst InlineValueEditor = function InlineValueEditor(props) {\n    const { value, onChange } = props;\n    const changeType = (0, react_1.useCallback)((type) => {\n        const newValue = defaultValuePerType[type](value.value);\n        onChange({\n            value: newValue,\n            type,\n            label: valToLabel(value.value) === value.label\n                ? valToLabel(newValue)\n                : value.label,\n        });\n    }, [value, onChange]);\n    const changeValue = (0, react_1.useCallback)((_val) => {\n        const newLabel = valToLabel(_val);\n        const oldLabel = valToLabel(value.value);\n        const wasUsingDefaultLabel = value.label === oldLabel || !value.label;\n        const labelToUse = wasUsingDefaultLabel ? newLabel : value.label;\n        onChange({ ...value, value: _val, label: labelToUse });\n    }, [value, onChange]);\n    const editorPanel = (0, react_1.useMemo)(() => {\n        switch (value.type) {\n            case \"string\":\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Value:\" },\n                    react_1.default.createElement(core_1.InputGroup, { type: \"text\", value: value.value, onChange: (e) => changeValue(e.target.value) })));\n            case \"number\":\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Value:\" },\n                    react_1.default.createElement(core_1.NumericInput, { value: value.value, onValueChange: (e) => changeValue(e) })));\n            case \"json\":\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Value:\" },\n                    react_1.default.createElement(core_1.TextArea, { value: value.value, onChange: (e) => changeValue(e.target.value) })));\n            case \"boolean\":\n                return (react_1.default.createElement(core_1.FormGroup, { label: \"Value:\" },\n                    react_1.default.createElement(core_1.HTMLSelect, { value: value.value, onChange: (e) => changeValue(e.target.value === \"true\") },\n                        react_1.default.createElement(\"option\", { value: \"true\" }, \"true\"),\n                        react_1.default.createElement(\"option\", { value: \"false\" }, \"false\"))));\n        }\n    }, [value, changeValue]);\n    return (react_1.default.createElement(\"div\", null,\n        react_1.default.createElement(core_1.FormGroup, { label: \"Value type:\" },\n            react_1.default.createElement(core_1.HTMLSelect, { value: value.type, onChange: (e) => changeType(e.target.value) }, types.map((type) => (react_1.default.createElement(\"option\", { key: type, value: type }, type))))),\n        editorPanel,\n        react_1.default.createElement(core_1.FormGroup, { label: \"Label:\" },\n            react_1.default.createElement(core_1.InputGroup, { type: \"text\", value: value.label, onChange: (e) => onChange({ ...value, label: e.target.value }) }))));\n};\nexports[\"default\"] = InlineValueEditor;\n\n\n//# sourceURL=webpack://__MacroNode__InlineValue/./src/Values/InlineValue.tsx?");

/***/ }),

/***/ "@blueprintjs/core":
/*!****************************!*\
  !*** external "Blueprint" ***!
  \****************************/
/***/ ((module) => {

module.exports = window["Blueprint"];

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/***/ ((module) => {

module.exports = window["React"];

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/Values/InlineValue.tsx");
/******/ 	window.__MacroNode__InlineValue = __webpack_exports__;
/******/ 	
/******/ })()
;"};