"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9995],{54852:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(49231);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},76119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(45675),a=(n(49231),n(54852));const o={sidebar_position:6},i="Creating New Code Parts",s={unversionedId:"code-parts",id:"code-parts",title:"Creating New Code Parts",description:"While Flyde is a great tool for creating flows, sometimes you need to do something that is not possible with the built-in components.",source:"@site/docs/code-parts.md",sourceDirName:".",slug:"/code-parts",permalink:"/docs/code-parts",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/code-parts.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lifecycle of a Part",permalink:"/docs/lifecycle"},next:{title:"Installing/Publishing Packages",permalink:"/docs/packages"}},c={},p=[{value:"Example",id:"example",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"creating-new-code-parts"},"Creating New Code Parts"),(0,a.kt)("p",null,"While Flyde is a great tool for creating flows, sometimes you need to do something that is not possible with the built-in components.\nCode parts allow you to create custom components using TypeScript or JavaScript. Inside Code parts you can use any library you want."),(0,a.kt)("p",null,"To create a new code part, you need to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a new file ending with ",(0,a.kt)("inlineCode",{parentName:"li"},".flyde.ts")," (or ",(0,a.kt)("inlineCode",{parentName:"li"},".flyde.js")," if you prefer JavaScript)"),(0,a.kt)("li",{parentName:"ol"},"Export an object that adheres to the ",(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/interfaces/CodePart"},"CodePart")," interface. Actually, you can return as many code parts as you want from a single file")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".flyde.[j|t]s"),' ending hints the Flyde editor to look for code parts in this file, and suggest them inside the "add part" menu.'),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"Let's say we want create a scraping part that uses ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/scrape-it"},"Scrape-it"),". We can create a new file called ",(0,a.kt)("inlineCode",{parentName:"p"},"scrape-it.flyde.ts")," and add the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { CodePart } from "@flyde/core";\nimport scrapeIt from "scrape-it";\n\nexport const scrapeItPart: CodePart = {\n  name: "Scrape It",\n  description: "Scrapes a website",\n  inputs: {\n    url: {\n      type: "string",\n      description: "The URL to scrape",\n    },\n    options: {\n        type: "object",\n        description: "The options to pass to scrape-it",\n    }\n  },\n  outputs: {\n    data: {\n      type: "object",\n      description: "The scraped data",\n    },\n  },\n  async fn(inputs) {\n    const data = await scrapeIt(inputs.url, inputs.options);\n\n    return {\n      data,\n    };\n  },\n};\n')),(0,a.kt)("p",null,"Then, you should be able to use it in your flows!"))}d.isMDXComponent=!0}}]);