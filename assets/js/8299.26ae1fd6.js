"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8299],{7361:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Error=t.Log=void 0;const i="Console";t.Log={id:"Log",defaultStyle:{icon:"fa-terminal"},namespace:i,description:"Logs a value to the console",inputs:{value:{description:"Value to log"}},outputs:{},run:({value:e})=>console.log(e)},t.Error={id:"Error",defaultStyle:{icon:"fa-terminal"},namespace:i,description:"Logs an error to the console",inputs:{value:{description:"Value to log"}},outputs:{},run:({value:e})=>console.error(e)}},76773:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DateToTimezoneOffset=t.DateToDayOfWeek=t.DateToMilliseconds=t.DateToSeconds=t.DateToMinutes=t.DateToHours=t.DateToDay=t.MonthToDate=t.DateToYear=t.DateToUnixTime=t.DateToISOString=t.DateToString=t.DateFromISOString=t.DateFromString=t.DateFromUnixTime=t.NowUnixTime=t.NowISOString=t.NowString=t.Now=void 0;const i="Dates";t.Now={id:"Now",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next(new Date)},t.NowString={id:"Now String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a string",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).toString())},t.NowISOString={id:"Now ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a string in ISO format",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).toISOString())},t.NowUnixTime={id:"Now Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a Unix time",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).getTime())},t.DateFromUnixTime={id:"Date From Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from a Unix time",inputs:{time:{description:"Unix time"}},outputs:{date:{description:"Date"}},run:({time:e},{date:t})=>t.next(new Date(e))},t.DateFromString={id:"Date From String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from a string",inputs:{string:{description:"String"}},outputs:{date:{description:"Date"}},run:({string:e},{date:t})=>t.next(new Date(e))},t.DateFromISOString={id:"Date From ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from an ISO string",inputs:{string:{description:"String"}},outputs:{date:{description:"Date"}},run:async({string:e},{date:t},{onError:i})=>{try{t.next(new Date(e))}catch(s){console.error("Error in part",s),i(s)}}},t.DateToString={id:"Date To String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a string",inputs:{date:{description:"Date"}},outputs:{string:{description:"String"}},run:({date:e},{string:t})=>t.next(e.toString())},t.DateToISOString={id:"Date To ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to an ISO string",inputs:{date:{description:"Date"}},outputs:{string:{description:"String"}},run:({date:e},{string:t})=>t.next(e.toISOString())},t.DateToUnixTime={id:"Date To Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a Unix time",inputs:{date:{description:"Date"}},outputs:{time:{description:"Unix time"}},run:({date:e},{time:t})=>t.next(e.getTime())},t.DateToYear={id:"Date To Year",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a year",inputs:{date:{description:"Date"}},outputs:{year:{description:"Year"}},run:({date:e},{year:t})=>t.next(e.getFullYear())},t.MonthToDate={id:"Month To Date",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a month",inputs:{date:{description:"Date"}},outputs:{month:{description:"Month"}},run:({date:e},{month:t})=>t.next(e.getMonth())},t.DateToDay={id:"Date To Day",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a day",inputs:{date:{description:"Date"}},outputs:{day:{description:"Day"}},run:({date:e},{day:t})=>t.next(e.getDate())},t.DateToHours={id:"Date To Hours",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to hours",inputs:{date:{description:"Date"}},outputs:{hours:{description:"Hours"}},run:({date:e},{hours:t})=>t.next(e.getHours())},t.DateToMinutes={id:"Date To Minutes",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to minutes",inputs:{date:{description:"Date"}},outputs:{minutes:{description:"Minutes"}},run:({date:e},{minutes:t})=>t.next(e.getMinutes())},t.DateToSeconds={id:"Date To Seconds",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to seconds",inputs:{date:{description:"Date"}},outputs:{seconds:{description:"Seconds"}},run:({date:e},{seconds:t})=>t.next(e.getSeconds())},t.DateToMilliseconds={id:"Date To Milliseconds",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to milliseconds",inputs:{date:{description:"Date"}},outputs:{milliseconds:{description:"Milliseconds"}},run:({date:e},{milliseconds:t})=>t.next(e.getMilliseconds())},t.DateToDayOfWeek={id:"Date To Day Of Week",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a day of the week",inputs:{date:{description:"Date"}},outputs:{day:{description:"Day"}},run:({date:e},{day:t})=>t.next(e.getDay())},t.DateToTimezoneOffset={id:"Date To Timezone Offset",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a timezone offset",inputs:{date:{description:"Date"}},outputs:{offset:{description:"Offset"}},run:({date:e},{offset:t})=>t.next(e.getTimezoneOffset())}},73977:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Put=t.Post=t.Get=void 0;const n=s(i(18706)),a="HTTP";t.Get={id:"GET Request",defaultStyle:{icon:"fa-server"},namespace:a,description:"Performs a HTTP GET request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i},{data:s})=>n.default.get(e,{headers:t,params:i}).then((e=>s.next(e.data)))},t.Post={id:"POST Request",defaultStyle:{icon:"fa-server"},namespace:a,description:"Performs a HTTP POST request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i,data:s},{data:a})=>{const r={headers:t,params:i};return n.default.post(e,s,r).then((e=>a.next(e.data)))}},t.Put={id:"PUT Request",defaultStyle:{icon:"fa-server"},namespace:a,description:"Performs a HTTP PUT request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i,data:s},{data:a})=>{const r={headers:t,params:i};return n.default.put(e,s,r).then((e=>a.next(e.data)))}},t.Request={id:"Request",defaultStyle:{icon:"fa-server"},namespace:a,description:"Performs a HTTP request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},method:{description:"HTTP method to use"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,method:t,headers:i,params:s,data:a},{data:r})=>{const o={method:t,headers:i,params:s};return n.default.request({url:e,data:a,...o}).then((e=>r.next(e.data)))}}},25733:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Flatten=t.Slice=t.RemoveAt=t.Remove=t.Prepend=t.Append=t.AccumulateSomeValuesByCount=t.AccumulateValuesByCount=t.AccumulateValuesByTime=t.AccumulateValuesUntilTrigger=t.SplitQuadruple=t.SplitTriple=t.SplitTuple=t.HeadAndRest=t.LoopList=t.Reverse=t.ConcatLists=t.ListFrom5=t.ListFrom4=t.ListFrom3=t.ListFrom2=t.Repeat=t.GetListElement=t.ListIsEmpty=t.ListLength=void 0;const i="Lists";t.ListLength={id:"List Length",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns the length of a list",inputs:{list:{description:"List"}},outputs:{length:{description:"Length"}},run:({list:e},{length:t})=>t.next(e.length)},t.ListIsEmpty={id:"List Is Empty",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns true if the list is empty",inputs:{list:{description:"List"}},outputs:{isEmpty:{description:"Is empty"}},run:({list:e},{isEmpty:t})=>t.next(0===e.length)},t.GetListElement={id:"Get List Element",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns the element at the specified index",inputs:{list:{description:"List"},index:{description:"Index"}},outputs:{element:{description:"Element"}},run:({list:e,index:t},{element:i})=>i.next(e[t])},t.Repeat={id:"Repeat",defaultStyle:{icon:"fa-list"},namespace:i,description:"Repeats a value a number of times",inputs:{value:{description:"Value to repeat"},times:{description:"How many times will the value be repeated"}},outputs:{list:{description:"List"}},run:({value:e,times:t},{list:i})=>{const s=[];for(let n=0;n<t;n++)s.push(e);return i.next(s)}},t.ListFrom2={id:"List From 2",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from two values",inputs:{value1:{description:"First value"},value2:{description:"Second value"}},outputs:{list:{description:"List containing the 2 values"}},run:({value1:e,value2:t},{list:i})=>i.next([e,t])},t.ListFrom3={id:"List From 3",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from three values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"}},outputs:{list:{description:"List containing all 3 values"}},run:({value1:e,value2:t,value3:i},{list:s})=>s.next([e,t,i])},t.ListFrom4={id:"List From 4",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from four values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"},value4:{description:"Fourth value"}},outputs:{list:{description:"List containing all 4 values"}},run:({value1:e,value2:t,value3:i,value4:s},{list:n})=>n.next([e,t,i,s])},t.ListFrom5={id:"List From 5",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from five values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"},value4:{description:"Fourth value"},value5:{description:"Fifth value"}},outputs:{list:{description:"List containing all 5 values"}},run:({value1:e,value2:t,value3:i,value4:s,value5:n},{list:a})=>a.next([e,t,i,s,n])},t.ConcatLists={id:"Concat Lists",defaultStyle:{icon:"fa-list"},namespace:i,description:"Concatenates two lists",inputs:{list1:{description:"First list"},list2:{description:"Second list"}},outputs:{list:{description:"Concatenated list"}},run:({list1:e,list2:t},{list:i})=>i.next([...e,...t])},t.Reverse={id:"Reverse",defaultStyle:{icon:"fa-list"},namespace:i,description:"Reverses a list",inputs:{list:{description:"List"}},outputs:{reversed:{description:"Reversed list"}},run:({list:e},{reversed:t})=>t.next(e.reverse())},t.LoopList={id:"Loop List",defaultStyle:{icon:"fa-list"},namespace:i,searchKeywords:["each","spread"],description:"Emits all values in a list",inputs:{list:{description:"The list to loop"}},outputs:{item:{description:"Will emit a value for each item in the list"},index:{description:"Will emit the index of the item"},length:{description:"Will emit the length of the list"}},run:(e,t)=>{const{list:i}=e,{item:s,index:n}=t;for(const a of i)s.next(a),n.next(i.indexOf(a));t.length.next(i.length)}},t.HeadAndRest={id:"Head and rest",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list and emits two outputs: the first item and the rest of the list",inputs:{list:{description:"The list"}},outputs:{head:{description:"The first item in the list"},rest:{description:"The rest of the list"}},run:(e,t)=>{const{list:i}=e,{head:s,rest:n}=t;s.next(i[0]),n.next(i.slice(1))}},t.SplitTuple={id:"Split Pair",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 2 items and emits two outputs: the first item and the second item",inputs:{pair:{description:"The pair to split"}},outputs:{item1:{description:"The first item in the pair"},item2:{description:"The second item in the pair"}},run:(e,t)=>{const{pair:i}=e,{item1:s,item2:n}=t;s.next(i[0]),n.next(i[1])}},t.SplitTriple={id:"Split Triple",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 3 items and emits three outputs: the first item, the second item and the third item",inputs:{triple:{description:"The triple"}},outputs:{item1:{description:"The first item in the triple"},item2:{description:"The second item in the triple"},item3:{description:"The third item in the triple"}},run:(e,t)=>{const{list:i}=e,{item1:s,item2:n,item3:a}=t;s.next(i[0]),n.next(i[1]),a.next(i[2])}},t.SplitQuadruple={id:"Split Quadruple",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 4 items and emits four outputs: the first item, the second item, the third item and the fourth item",inputs:{quadruple:{description:"The quadruple"}},outputs:{item1:{description:"The first item in the quadruple"},item2:{description:"The second item in the quadruple"},item3:{description:"The third item in the quadruple"},item4:{description:"The fourth item in the quadruple"}},run:(e,t)=>{const{list:i}=e,{item1:s,item2:n,item3:a,item4:r}=t;s.next(i[0]),n.next(i[1]),a.next(i[2]),r.next(i[3])}},t.AccumulateValuesUntilTrigger={id:"Accumulate Values by Trigger",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input, until the "reset" input is triggered. Then it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},reset:{description:"Resets the accumulator"}},reactiveInputs:["value","reset"],outputs:{accumulated:{description:"The accumulated values"}},run:(e,t,i)=>{const{item:s,until:n}=e,{r:a}=t,{state:r}=i;let o=r.get("list")||[];void 0!==s&&(o.push(s),r.set("list",o)),void 0!==n&&a.next(o)}},t.AccumulateValuesByTime={id:"Accumulate Values by Time",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input. After the specified time it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},time:{description:"Time to wait before emitting the accumulated values. Default is 200ms",defaultValue:200,mode:"required-if-connected"}},reactiveInputs:["value"],outputs:{accumulated:{description:"The accumulated values"}},run:(e,t,i)=>{const{value:s,time:n}=e,{accumulated:a}=t,{state:r}=i;let o=r.get("list")||[];const u=Date.now()%1e3;console.log("called",e.value,e.time,u),r.set("bob",2),console.log(Array.from(r.entries())),void 0!==s&&(o.push(s),r.set("list",o)),r.get("timeout")&&clearTimeout(r.get("timeout"));const c=new Promise((e=>{r.set("resolve",e)}));return r.set("timeout",setTimeout((()=>{console.log("emitting",o,u,Date.now()%1e3),a.next(o),r.set("list",[]);const e=r.get("resolve");if(!e)throw new Error("resolve is undefined");e()}),n)),c}},t.AccumulateValuesByCount={id:"Accumulate Values by Count",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input. After the specified count it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},count:{description:"Number of values to accumulate before emitting them"}},reactiveInputs:["value"],outputs:{accumulated:{description:"The accumulated values"}},completionOutputs:["accumulated"],run:(e,t,i)=>{const{value:s,count:n}=e,{accumulated:a}=t,{state:r}=i;let o=r.get("list")||[];void 0!==s&&(o.push(s),r.set("list",o)),o.length>=n&&a.next(o)}},t.AccumulateSomeValuesByCount={id:"Accumulate Some Values by Count",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "accept" input. Emits the list after the total items passed to both "accept" and "ignore" inputs reach the specified count.',inputs:{accept:{description:"Values to accumulate"},ignore:{description:"Values to ignore"},count:{description:"Number of values to accumulate before emitting them"}},reactiveInputs:["accept","ignore"],outputs:{accumulated:{description:"The accumulated accepted values"},ignored:{description:"The accumulated ignored values"}},run:(e,t,i)=>{const{accept:s,ignore:n,count:a}=e,{accumulated:r,ignored:o}=t,{state:u}=i;let c=u.get("list")||[],d=u.get("ignored")||[];void 0!==s&&(c.push(s),u.set("list",c)),void 0!==n&&(d.push(n),u.set("ignored",o)),c.length+d.length>=a&&(r.next(c),o.next(o))}},t.Append={id:"Append",namespace:i,description:"Appends an item to a list",inputs:{list:{description:"The list"},item:{description:"The item to append"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next([...e,t])},defaultStyle:{icon:"fa-plus"}},t.Prepend={id:"Prepend",namespace:i,description:"Prepends an item to a list",inputs:{list:{description:"The list"},item:{description:"The item to prepend"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next([t,...e])},defaultStyle:{icon:"fa-arrow-up"}},t.Remove={id:"Remove",namespace:i,description:"Removes an item from a list",inputs:{list:{description:"The list"},item:{description:"The item to remove"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next(e.filter((e=>e!==t)))},defaultStyle:{icon:"fa-minus"}},t.RemoveAt={id:"Remove At",namespace:i,description:"Removes an item from a list at the specified index",inputs:{list:{description:"The list"},index:{description:"The index of the item to remove"}},outputs:{list:{description:"The resulting list"}},run:({list:e,index:t},{list:i})=>{i.next(e.filter(((e,i)=>i!==t)))},defaultStyle:{icon:"fa-times"}},t.Slice={id:"Slice",namespace:i,description:"Returns a slice of a list from the specified start index to the specified end index",inputs:{list:{description:"The list"},start:{description:"The index to start slicing from"},end:{description:"The index to end slicing at"}},outputs:{list:{description:"The resulting list"}},run:({list:e,start:t,end:i},{list:s})=>{s.next(e.slice(t,i))},defaultStyle:{icon:"fa-cut"}},t.Flatten={id:"Flatten",namespace:i,description:"Flattens a list of lists into a single list",inputs:{list:{description:"The list of lists"}},outputs:{list:{description:"The resulting list"}},run:({list:e},{list:t})=>{t.next(e.reduce(((e,t)=>[...e,...t]),[]))},defaultStyle:{icon:"fa-compress"}}},32331:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PropertyEquals=t.DeleteAttribute=t.SetAttribute=t.GetAttribute=t.ObjectAssign=t.ObjectFromEntries=t.ObjectEntries=t.ObjectValues=t.ObjectKeys=t.JSONStringify=t.JSONParse=void 0;const i="Objects";t.JSONParse={id:"JSON Parse",defaultStyle:{icon:"fa-glasses"},namespace:i,description:"Parses a JSON string into an object",inputs:{json:{description:"JSON string to parse"}},outputs:{object:{description:"The parsed object"}},run:({json:e},{object:t})=>t.next(JSON.parse(e))},t.JSONStringify={id:"JSON Stringify",defaultStyle:{icon:"fa-pen-fancy"},namespace:i,description:"Stringifies an object into a JSON string",inputs:{object:{description:"Object to stringify"}},outputs:{json:{description:"The stringified JSON"}},run:({object:e},{json:t})=>t.next(JSON.stringify(e))},t.ObjectKeys={id:"Keys",defaultStyle:{icon:"fa-key"},namespace:i,description:"Emits the keys of an object",inputs:{object:{description:"Object to get keys of"}},outputs:{keys:{description:"The keys of object"}},run:({object:e},{keys:t})=>t.next(Object.keys(e))},t.ObjectValues={id:"Values",namespace:i,description:"Emits the values of an object",inputs:{object:{description:"Object to get values of"}},outputs:{values:{description:"The values of object"}},run:({object:e},{values:t})=>t.next(Object.values(e))},t.ObjectEntries={id:"Entries",defaultStyle:{icon:"fa-box"},namespace:i,description:"Emits the entries of an object",inputs:{object:{description:"Object to get entries of"}},outputs:{entries:{description:"The entries of object"}},run:({object:e},{entries:t})=>t.next(Object.entries(e))},t.ObjectFromEntries={id:"From Entries",namespace:i,defaultStyle:{icon:"fa-box"},description:"Creates an object from an array of entries",inputs:{entries:{description:"Array of entries to create object from"}},outputs:{object:{description:"The created object"}},run:({entries:e},{object:t})=>t.next(Object.fromEntries(e))},t.ObjectAssign={id:"Assign",namespace:i,defaultStyle:{icon:"fa-box"},description:"Assigns properties from one or more objects to a target object",inputs:{target:{description:"Target object to assign properties to"},sources:{description:"One or more objects to assign properties from"}},outputs:{object:{description:"The target object"}},run:({target:e,sources:t},{object:i})=>i.next(Object.assign(e,...t))},t.GetAttribute={id:"Get Attribute",searchKeywords:["pick","dot"],namespace:i,defaultStyle:{icon:"fa-magnifying-glass"},description:"Gets an attribute from an object",inputs:{object:{description:"Object to get attribute from"},attribute:{description:"Attribute to get"}},outputs:{value:{description:"The value of the attribute"}},customViewCode:'<% if (inputs.attribute) { %> Get "<%- inputs.attribute %>"<% } else { %> Get Attribute <% } %>',run:({object:e,attribute:t},{value:i})=>i.next(t.split(".").reduce(((e,t)=>e[t]),e))},t.SetAttribute={id:"Set Attribute",searchKeywords:["dot"],namespace:i,defaultStyle:{icon:"fa-box"},description:"Sets an attribute on an object",inputs:{object:{description:"Object to set attribute on"},attribute:{description:"Attribute to set"},value:{description:"Value to set attribute to"}},outputs:{object:{description:"The object with the attribute set"}},customViewCode:'<% if (inputs.attribute) { %> Set "<%- inputs.attribute %>"<% } else { %> Set Attribute <% } %>',run:({object:e,attribute:t,value:i},{object:s})=>{const n=t.split("."),a=n.pop();return n.reduce(((e,t)=>e[t]),e)[a]=i,s.next(e)}},t.DeleteAttribute={id:"Delete Attribute",defaultStyle:{icon:"fa-box"},namespace:i,description:"Deletes an attribute from an object",inputs:{object:{description:"Object to delete attribute from"},attribute:{description:"Attribute to delete"}},customViewCode:'<% if (inputs.attribute?.value) { %> Delete "<%- inputs.attribute.value %>"<% } else { %> Delete Attribute <% } %>',outputs:{object:{description:"The object with the attribute deleted"}},run:({object:e,attribute:t},{object:i})=>{const s=t.value.split("."),n=s.pop();delete s.reduce(((e,t)=>e[t]),e.value)[n],i.next(e.value)}},t.PropertyEquals={id:"Property Equals",namespace:i,defaultStyle:{icon:"fa-equals"},description:'Emits the object to the "true" output if an object\'s property equals a value, otherwise emits to the "false" output',inputs:{object:{description:"Object to check property of"},attribute:{description:"Attribute to check"},value:{description:"Value to check attribute against"}},outputs:{true:{description:"Emitted if the attribute equals the value"},false:{description:"Emitted if the attribute does not equal the value"}},customViewCode:'<% if (inputs.attribute) { %> "<%- inputs.attribute %>" equals "<%- inputs.value %>"<% } else { %> Property Equals <% } %>',run:(e,t)=>{e.attribute.split(".").reduce(((e,t)=>e[t]),e.object)===e.value?t.true.next(e.object):t.false.next(e.object)}}},59921:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GetGlobalState=t.SetGlobalState=void 0;const i="State";t.SetGlobalState={id:"Set Global State",namespace:i,description:"Sets a value in the global state",inputs:{key:{description:"Key to set"},value:{description:"Value to set"}},outputs:{setValue:{description:"Value that was set"}},run:({key:e,value:t},{setValue:i},{globalState:s})=>{s.set(e,t),i.next(t)}},t.GetGlobalState={id:"Get Global State",namespace:i,description:"Gets a value from the global state",inputs:{key:{description:"Key to get"},defaultValue:{description:"Default value if key is not set",mode:"required-if-connected"}},outputs:{value:{description:"Value of the key"}},run:({key:e,defaultValue:t},{value:i},{globalState:s,onError:n})=>{var a;void 0===s.get(e)&&void 0===t?n(new Error(`Key ${e} is not set`)):i.next(null!==(a=s.get(e))&&void 0!==a?a:t)}}},70094:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyString=t.MatchRegex=t.IsEmpty=t.EndsWith=t.StartsWith=t.Includes=t.ToTitleCase=t.ToSnakeCase=t.ToPascalCase=t.ToCamelCase=t.ToKebabCase=t.CharAt=t.LastIndexOf=t.IndexOf=t.Length=t.Substring=t.ToUpperCase=t.ToLowerCase=t.Trim=t.Replace=t.Join=t.Split=t.Concat=void 0;const i="Strings";t.Concat={id:"Concat",defaultStyle:{icon:"fa-font"},namespace:i,description:"Concatenates two strings",inputs:{a:{description:"String a"},b:{description:"String b"}},outputs:{value:{description:"Concatenated value"}},run:({a:e,b:t},{value:i})=>i.next(e+t)},t.Split={id:"Split",defaultStyle:{icon:"fa-font"},namespace:i,description:"Splits a string",inputs:{string:{description:"String to split"},separator:{description:"Separator"}},outputs:{value:{description:"Splitted value"}},run:({string:e,separator:t},{value:i})=>i.next(e.split(t))},t.Join={id:"Join",defaultStyle:{icon:"fa-font"},namespace:i,description:"Joins an array of strings",inputs:{array:{description:"Array to join"},separator:{description:"Separator"}},outputs:{value:{description:"Joined value"}},run:({array:e,separator:t},{value:i})=>i.next(e.join(t))},t.Replace={id:"Replace",defaultStyle:{icon:"fa-font"},namespace:i,description:"Replaces a string",inputs:{string:{description:"String to replace"},searchValue:{description:"Value to search for"},replaceValue:{description:"Value to replace with"}},outputs:{value:{description:"Replaced value"}},run:({string:e,searchValue:t,replaceValue:i},{value:s})=>s.next(e.replace(t,i))},t.Trim={id:"Trim",defaultStyle:{icon:"fa-font"},namespace:i,description:"Trims a string",inputs:{string:{description:"String to trim"}},outputs:{value:{description:"Trimmed value"}},run:({string:e},{value:t})=>t.next(e.trim())},t.ToLowerCase={id:"To Lower Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to lower case",inputs:{string:{description:"String to convert to lower case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.toLowerCase())},t.ToUpperCase={id:"To Upper Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to upper case",inputs:{string:{description:"String to convert to upper case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.toUpperCase())},t.Substring={id:"Substring",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the part of the string between the start and end indexes",inputs:{string:{description:"String to get substring from"},start:{description:"Start index"},end:{description:"End index"}},outputs:{value:{description:"Substring"}},run:({string:e,start:t,end:i},{value:s})=>s.next(e.substring(t,i))},t.Length={id:"Length",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the length of a string",inputs:{string:{description:"String to get length from"}},outputs:{value:{description:"Length"}},run:({string:e},{value:t})=>t.next(e.length)},t.IndexOf={id:"Index Of",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Index"}},run:({string:e,searchValue:t,fromIndex:i},{value:s})=>s.next(e.indexOf(t,i))},t.LastIndexOf={id:"Last Index Of",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Index"}},run:({string:e,searchValue:t,fromIndex:i},{value:s})=>s.next(e.lastIndexOf(t,i))},t.CharAt={id:"Char At",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the character at the specified index",inputs:{string:{description:"String to get character from"},index:{description:"Index to get character from"}},outputs:{value:{description:"Character"}},run:({string:e,index:t},{value:i})=>i.next(e.charAt(t))},t.ToKebabCase={id:"To Kebab Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to kebab case",inputs:{string:{description:"String to convert to kebab case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/\s+/g,"-").toLowerCase())},t.ToCamelCase={id:"To Camel Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to camel case",inputs:{string:{description:"String to convert to camel case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g,((e,t)=>0==+e?"":0===t?e.toLowerCase():e.toUpperCase())))},t.ToPascalCase={id:"To Pascal Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to pascal case",inputs:{string:{description:"String to convert to pascal case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/(?:^\w|[A-Z]|\b\w)/g,((e,t)=>0===t?e.toUpperCase():e.toLowerCase())).replace(/\s+/g,""))},t.ToSnakeCase={id:"To Snake Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to snake case",inputs:{string:{description:"String to convert to snake case"}},outputs:{value:{description:"Converted value"}},run:e=>e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/\s+/g,"_").toLowerCase()},t.ToTitleCase={id:"To Title Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to title case",inputs:{string:{description:"String to convert to title case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())))},t.Includes={id:"Includes",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether one string may be found within another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:({string:e,searchValue:t,fromIndex:i},{value:s})=>s.next(e.includes(t,i))},t.StartsWith={id:"Starts With",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string begins with the characters of another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:({string:e,searchValue:t,fromIndex:i},{value:s})=>s.next(e.startsWith(t,i))},t.EndsWith={id:"Ends With",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string ends with the characters of another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:(e,t,i)=>e.endsWith(t,i)},t.IsEmpty={id:"Is Empty",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string is empty",inputs:{string:{description:"String to check"}},outputs:{value:{description:"Result"}},run:({string:e},{value:t})=>t.next(0===e.length)},t.MatchRegex={id:"Match Regex",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string matches a regular expression",inputs:{string:{description:"String to check"},regex:{description:"Regular expression to match"}},outputs:{value:{description:"Result"}},run:({string:e,regex:t},{value:i})=>i.next(e.match(t))},t.EmptyString={id:"Empty String",namespace:i,defaultStyle:{icon:"fa-font",size:"small"},description:"Creates an empty string",inputs:{},outputs:{string:{description:"The empty string"}},run:({},{string:e})=>e.next("")}},88299:function(e,t,i){var s=this&&this.__createBinding||(Object.create?function(e,t,i,s){void 0===s&&(s=i);var n=Object.getOwnPropertyDescriptor(t,i);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,s,n)}:function(e,t,i,s){void 0===s&&(s=i),e[s]=t[i]}),n=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||s(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),n(i(73977),t),n(i(32331),t),n(i(16610),t),n(i(70094),t),n(i(15379),t),n(i(25733),t),n(i(7361),t),n(i(76773),t),n(i(59921),t)}}]);