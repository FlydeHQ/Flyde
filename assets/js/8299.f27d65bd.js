"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8299],{7361:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Error=t.Log=void 0;const i="Console";t.Log={id:"Log",defaultStyle:{icon:"fa-terminal"},namespace:i,description:"Logs a value to the console",inputs:{value:{description:"Value to log"}},outputs:{},run:({value:e})=>console.log(e)},t.Error={id:"Error",defaultStyle:{icon:"fa-terminal"},namespace:i,description:"Logs an error to the console",inputs:{value:{description:"Value to log"}},outputs:{},run:({value:e})=>console.error(e)}},15379:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Equals=t.EqualsBoolean=t.Throttle=t.ThrottleError=t.Debounce=t.Interval=t.Delay=t.Switch4=t.Switch2=t.Switch3=t.EmitOnTrigger=t.BooleanSplit=t.Subscribe=t.Publish=t.RoundRobin4=t.RoundRobin2=t.RoundRobin3=t.LimitTimes=void 0;const n=i(11253),s="Control Flow";t.LimitTimes={id:"Limit Times",namespace:s,description:"Item will be emitted until the limit is reached",inputs:{item:{mode:"required",description:"The item to emit"},times:{mode:"required",description:"The number of times to emit the item"},reset:{mode:"optional",description:"Reset the counter"}},outputs:{ok:{}},reactiveInputs:["item","reset"],completionOutputs:[],run:function(e,t,i){const{state:n}=i,{item:s,times:o,reset:a}=e,{ok:r}=t;if(void 0!==a)return void n.set("val",0);let u=n.get("val")||0;u++,n.set("val",u),u>=o?i.onError(new Error(`Limit of ${o} reached`)):r.next(s)}},t.RoundRobin3={id:"Round Robin 3",namespace:s,description:"Item will be emitted to one of the three outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'},r3:{description:'The third output in order to emit the value received. After emitting a value, it moves back to "r1"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:s,r2:o,r3:a}=t,r=n.get("curr")||0,u=(r+1)%3;[s,o,a][r].next(e.item),n.set("curr",u)}},t.RoundRobin2={namespace:s,id:"Round Robin 2",description:"Item will be emitted to one of the 2 outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:s,r2:o}=t,a=n.get("curr")||0,r=(a+1)%2;[s,o][a].next(e.item),n.set("curr",r)}},t.RoundRobin4={id:"Round Robin 4",namespace:s,description:"Item will be emitted to one of the 4 outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'},r3:{description:'The third output in order to emit the value received. After emitting a value, it moves to "r4"\'s turn.'},r4:{description:'The fourth output in order to emit the value received. After emitting a value, it moves back to "r1"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:s,r2:o,r3:a,r4:r}=t,u=n.get("curr")||0,d=(u+1)%4;[s,o,a,r][u].next(e.item),n.set("curr",d)}},t.Publish={id:"Publish",namespace:s,description:"Publishes a value by a key to all listeners in the current flow. Use 'Subscribe' to listen to events.",inputs:{key:{mode:"required",description:"A key to use to subscribe to values"},value:{mode:"required"}},outputs:{},run:function(e,t,i){const s=`${i.ancestorsInsIds}__${e.key}`;n.publish(s,e.value)}},t.Subscribe={id:"Subscribe",namespace:s,description:"Subscribes to a value published by a key. Use 'Publish' to publish values.",inputs:{key:{mode:"required",description:"A key to use to subscribe to values"},initial:{mode:"required-if-connected",description:"If passed will be published has the first value"}},completionOutputs:[],outputs:{value:{description:"The value published by the key"}},run:function(e,t,i){const{value:s}=t,o=`${i.ancestorsInsIds}__${e.key}`,a=n.subscribe(o,((e,t)=>{s.next(t)}));void 0!==e.initial&&s.next(e.initial),i.onCleanup((()=>{n.unsubscribe(a)}))}},t.BooleanSplit={namespace:s,id:"Boolean Split",description:"Splits a boolean value into two outputs",inputs:{value:{mode:"required",description:"Boolean value"},trueValue:{mode:"required-if-connected",description:"Value to emit if the input is true. Defaults to true"},falseValue:{mode:"required-if-connected",description:"Value to emit if the input is false. Defaults to false"}},outputs:{true:{description:"The value is true"},false:{description:"The value is false"}},run:function(e,t){const{true:i,false:n}=t,{value:s,trueValue:o,falseValue:a}=e;s?i.next(null==o||o):n.next(null!=a&&a)}},t.EmitOnTrigger={namespace:s,id:"Emit on Trigger",description:"Emits the value when the trigger input receives any value",inputs:{value:{mode:"required",description:"The value to emit"},trigger:{mode:"required",description:"The trigger to emit the value"}},outputs:{result:{description:"The value emitted"}},run:function(e,t){const{result:i}=t,{value:n,trigger:s}=e;void 0!==s&&i.next(n)}},t.Switch3={namespace:s,id:"Switch 3",description:"Switches between 3 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},thirdCase:{mode:"required",description:"The value to switch on for the third output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},third:{description:"The value emitted if the input value is equal to the third case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,third:s,default:o,outputValue:a}=t,{value:r,firstCase:u,secondCase:d,thirdCase:c}=e;r===u?i.next(null!=a?a:r):r===d?n.next(null!=a?a:r):r===c?s.next(null!=a?a:r):o.next(null!=a?a:r)}},t.Switch2={id:"Switch 2",description:"Switches between 2 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",namespace:s,inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,default:s,outputValue:o}=t,{value:a,firstCase:r,secondCase:u}=e;a===r?i.next(null!=o?o:a):a===u?n.next(null!=o?o:a):s.next(null!=o?o:a)}},t.Switch4={id:"Switch 4",description:"Switches between 4 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",namespace:s,inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},thirdCase:{mode:"required",description:"The value to switch on for the third output"},fourthCase:{mode:"required",description:"The value to switch on for the fourth output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},third:{description:"The value emitted if the input value is equal to the third case"},fourth:{description:"The value emitted if the input value is equal to the fourth case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,third:s,fourth:o,default:a,outputValue:r}=t,{value:u,firstCase:d,secondCase:c,thirdCase:l,fourthCase:p}=e;u===d?i.next(null!=r?r:u):u===c?n.next(null!=r?r:u):u===l?s.next(null!=r?r:u):u===p?o.next(null!=r?r:u):a.next(null!=r?r:u)}},t.Delay={id:"Delay",defaultStyle:{icon:"fa-clock"},searchKeywords:["timeout","wait","setTimeout"],namespace:s,description:"Delays a value",inputs:{value:{description:"Value to delay"},delay:{description:"Delay in milliseconds"}},outputs:{delayedValue:{description:"Delayed value"}},run:async({value:e,delay:t},{delayedValue:i})=>{await new Promise((e=>setTimeout(e,t))),i.next(e)}},t.Interval={id:"Interval",namespace:s,defaultStyle:{icon:"fa-clock"},description:"Emits a value every interval",inputs:{value:{description:"Value to emit"},interval:{description:"Interval in milliseconds"}},reactiveInputs:["value","interval"],outputs:{value:{description:"Emitted value"}},completionOutputs:[],run:(e,t,i)=>{i.state.get("timer")&&clearInterval(i.state.get("timer"));const n=setInterval((()=>{t.value.next(e.value)}),e.interval);i.state.set("timer",n),i.onCleanup((()=>{clearInterval(n)}))}},t.Debounce={id:"Debounce",namespace:s,inputs:{value:{mode:"required",description:"The data that needs to be debounced"},wait:{mode:"required",defaultValue:250,description:"Time (in millis) to wait until 'value' is emitted"}},outputs:{result:{description:"The debounced value"}},completionOutputs:["result"],reactiveInputs:["value"],description:'Emits the last value received after being idle for "wait" amount of milliseconds',run:function(e,t,i){const{value:n,wait:s}=e,{result:o}=t,a=i.state.get("timer");a&&clearTimeout(a);const r=setTimeout((()=>{o.next(n)}),s);i.state.set("timer",r),i.onCleanup((()=>{clearTimeout(a)}))}};class o extends Error{constructor(e){super("Throttle: Value dropped"),this.value=e}}t.ThrottleError=o,t.Throttle={id:"Throttle",namespace:s,inputs:{value:{mode:"required",description:"The data that needs to be throttled"},wait:{mode:"required",defaultValue:250,description:"Time (in millis) to wait until 'value' is emitted"}},outputs:{result:{description:"The throttled value"}},completionOutputs:["result"],reactiveInputs:["value"],description:'Emits the first value received after being idle for "wait" amount of milliseconds',run:function(e,t,i){const{value:n,wait:s}=e,{result:a}=t;if(i.state.get("timer"))i.onError(new o(n));else{a.next(n);const e=setTimeout((()=>{i.state.set("timer",null)}),s);i.state.set("timer",e)}}},t.EqualsBoolean={id:"Equals (Bool)",defaultStyle:{icon:"fa-equals"},namespace:s,description:"Emits true if two values are equal (=== equality). Otherwise emits false.",inputs:{a:{description:"First value"},b:{description:"Second value"}},outputs:{result:{description:"true if a is equal to b"}},run:({a:e,b:t},{result:i})=>i.next(e===t)},t.Equals={id:"Equals",namespace:s,description:'Emits the value of "a" to output "true" if "a" is equal to "b". Otherwise emits the value of "a" to output "false".',inputs:{a:{mode:"required",description:"First value"},b:{mode:"required",description:"Second value"}},outputs:{true:{description:"Emits the value of a if a is equal to b"},false:{description:"Emits the value of a if a is not equal to b"}},run:(e,t)=>{const{a:i,b:n}=e,{true:s,false:o}=t;i===n?s.next(i):o.next(i)}}},76773:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DateToTimezoneOffset=t.DateToDayOfWeek=t.DateToMilliseconds=t.DateToSeconds=t.DateToMinutes=t.DateToHours=t.DateToDay=t.MonthToDate=t.DateToYear=t.DateToUnixTime=t.DateToISOString=t.DateToString=t.DateFromISOString=t.DateFromString=t.DateFromUnixTime=t.NowUnixTime=t.NowISOString=t.NowString=t.Now=void 0;const i="Dates";t.Now={id:"Now",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next(new Date)},t.NowString={id:"Now String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a string",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).toString())},t.NowISOString={id:"Now ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a string in ISO format",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).toISOString())},t.NowUnixTime={id:"Now Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Returns the current date and time as a Unix time",inputs:{},outputs:{now:{description:"Current date and time"}},run:(e,{now:t})=>t.next((new Date).getTime())},t.DateFromUnixTime={id:"Date From Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from a Unix time",inputs:{time:{description:"Unix time"}},outputs:{date:{description:"Date"}},run:({time:e},{date:t})=>t.next(new Date(e))},t.DateFromString={id:"Date From String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from a string",inputs:{string:{description:"String"}},outputs:{date:{description:"Date"}},run:({string:e},{date:t})=>t.next(new Date(e))},t.DateFromISOString={id:"Date From ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Creates a date from an ISO string",inputs:{string:{description:"String"}},outputs:{date:{description:"Date"}},run:async({string:e},{date:t},{onError:i})=>{try{t.next(new Date(e))}catch(n){console.error("Error in part",n),i(n)}}},t.DateToString={id:"Date To String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a string",inputs:{date:{description:"Date"}},outputs:{string:{description:"String"}},run:({date:e},{string:t})=>t.next(e.toString())},t.DateToISOString={id:"Date To ISO String",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to an ISO string",inputs:{date:{description:"Date"}},outputs:{string:{description:"String"}},run:({date:e},{string:t})=>t.next(e.toISOString())},t.DateToUnixTime={id:"Date To Unix Time",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a Unix time",inputs:{date:{description:"Date"}},outputs:{time:{description:"Unix time"}},run:({date:e},{time:t})=>t.next(e.getTime())},t.DateToYear={id:"Date To Year",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a year",inputs:{date:{description:"Date"}},outputs:{year:{description:"Year"}},run:({date:e},{year:t})=>t.next(e.getFullYear())},t.MonthToDate={id:"Month To Date",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a month",inputs:{date:{description:"Date"}},outputs:{month:{description:"Month"}},run:({date:e},{month:t})=>t.next(e.getMonth())},t.DateToDay={id:"Date To Day",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a day",inputs:{date:{description:"Date"}},outputs:{day:{description:"Day"}},run:({date:e},{day:t})=>t.next(e.getDate())},t.DateToHours={id:"Date To Hours",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to hours",inputs:{date:{description:"Date"}},outputs:{hours:{description:"Hours"}},run:({date:e},{hours:t})=>t.next(e.getHours())},t.DateToMinutes={id:"Date To Minutes",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to minutes",inputs:{date:{description:"Date"}},outputs:{minutes:{description:"Minutes"}},run:({date:e},{minutes:t})=>t.next(e.getMinutes())},t.DateToSeconds={id:"Date To Seconds",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to seconds",inputs:{date:{description:"Date"}},outputs:{seconds:{description:"Seconds"}},run:({date:e},{seconds:t})=>t.next(e.getSeconds())},t.DateToMilliseconds={id:"Date To Milliseconds",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to milliseconds",inputs:{date:{description:"Date"}},outputs:{milliseconds:{description:"Milliseconds"}},run:({date:e},{milliseconds:t})=>t.next(e.getMilliseconds())},t.DateToDayOfWeek={id:"Date To Day Of Week",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a day of the week",inputs:{date:{description:"Date"}},outputs:{day:{description:"Day"}},run:({date:e},{day:t})=>t.next(e.getDay())},t.DateToTimezoneOffset={id:"Date To Timezone Offset",defaultStyle:{icon:"fa-calendar"},namespace:i,description:"Converts a date to a timezone offset",inputs:{date:{description:"Date"}},outputs:{offset:{description:"Offset"}},run:({date:e},{offset:t})=>t.next(e.getTimezoneOffset())}},73977:function(e,t,i){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Put=t.Post=t.Get=void 0;const s=n(i(18706)),o="HTTP";t.Get={id:"GET Request",defaultStyle:{icon:"fa-server"},namespace:o,description:"Performs a HTTP GET request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i},{data:n})=>s.default.get(e,{headers:t,params:i}).then((e=>n.next(e.data)))},t.Post={id:"POST Request",defaultStyle:{icon:"fa-server"},namespace:o,description:"Performs a HTTP POST request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i,data:n},{data:o})=>{const a={headers:t,params:i};return s.default.post(e,n,a).then((e=>o.next(e.data)))}},t.Put={id:"PUT Request",defaultStyle:{icon:"fa-server"},namespace:o,description:"Performs a HTTP PUT request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,headers:t,params:i,data:n},{data:o})=>{const a={headers:t,params:i};return s.default.put(e,n,a).then((e=>o.next(e.data)))}},t.Request={id:"Request",defaultStyle:{icon:"fa-server"},namespace:o,description:"Performs a HTTP request to a URL and emits the response data",inputs:{url:{description:"URL to fetch data from"},method:{description:"HTTP method to use"},headers:{description:"Headers to send with the request",mode:"required-if-connected"},params:{description:"Query parameters to send with the request",mode:"required-if-connected"},data:{description:"Data to send with the request",mode:"required-if-connected"}},outputs:{data:{description:"The response data"}},run:({url:e,method:t,headers:i,params:n,data:o},{data:a})=>{const r={method:t,headers:i,params:n};return s.default.request({url:e,data:o,...r}).then((e=>a.next(e.data)))}}},25733:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Flatten=t.Slice=t.RemoveAt=t.Remove=t.Prepend=t.Append=t.AccumulateSomeValuesByCount=t.AccumulateValuesByCount=t.AccumulateValuesByTime=t.AccumulateValuesUntilTrigger=t.SplitQuadruple=t.SplitTriple=t.SplitTuple=t.HeadAndRest=t.LoopList=t.Reverse=t.ConcatLists=t.ListFrom5=t.ListFrom4=t.ListFrom3=t.ListFrom2=t.Repeat=t.GetListElement=t.ListIsEmpty=t.ListLength=void 0;const i="Lists";t.ListLength={id:"List Length",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns the length of a list",inputs:{list:{description:"List"}},outputs:{length:{description:"Length"}},run:({list:e},{length:t})=>t.next(e.length)},t.ListIsEmpty={id:"List Is Empty",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns true if the list is empty",inputs:{list:{description:"List"}},outputs:{isEmpty:{description:"Is empty"}},run:({list:e},{isEmpty:t})=>t.next(0===e.length)},t.GetListElement={id:"Get List Element",defaultStyle:{icon:"fa-list"},namespace:i,description:"Returns the element at the specified index",inputs:{list:{description:"List"},index:{description:"Index"}},outputs:{element:{description:"Element"}},run:({list:e,index:t},{element:i})=>i.next(e[t])},t.Repeat={id:"Repeat",defaultStyle:{icon:"fa-list"},namespace:i,description:"Repeats a value a number of times",inputs:{value:{description:"Value to repeat"},times:{description:"How many times will the value be repeated"}},outputs:{list:{description:"List"}},run:({value:e,times:t},{list:i})=>{const n=[];for(let s=0;s<t;s++)n.push(e);return i.next(n)}},t.ListFrom2={id:"List From 2",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from two values",inputs:{value1:{description:"First value"},value2:{description:"Second value"}},outputs:{list:{description:"List containing the 2 values"}},run:({value1:e,value2:t},{list:i})=>i.next([e,t])},t.ListFrom3={id:"List From 3",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from three values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"}},outputs:{list:{description:"List containing all 3 values"}},run:({value1:e,value2:t,value3:i},{list:n})=>n.next([e,t,i])},t.ListFrom4={id:"List From 4",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from four values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"},value4:{description:"Fourth value"}},outputs:{list:{description:"List containing all 4 values"}},run:({value1:e,value2:t,value3:i,value4:n},{list:s})=>s.next([e,t,i,n])},t.ListFrom5={id:"List From 5",defaultStyle:{icon:"fa-list"},namespace:i,description:"Creates a list from five values",inputs:{value1:{description:"First value"},value2:{description:"Second value"},value3:{description:"Third value"},value4:{description:"Fourth value"},value5:{description:"Fifth value"}},outputs:{list:{description:"List containing all 5 values"}},run:({value1:e,value2:t,value3:i,value4:n,value5:s},{list:o})=>o.next([e,t,i,n,s])},t.ConcatLists={id:"Concat Lists",defaultStyle:{icon:"fa-list"},namespace:i,description:"Concatenates two lists",inputs:{list1:{description:"First list"},list2:{description:"Second list"}},outputs:{list:{description:"Concatenated list"}},run:({list1:e,list2:t},{list:i})=>i.next([...e,...t])},t.Reverse={id:"Reverse",defaultStyle:{icon:"fa-list"},namespace:i,description:"Reverses a list",inputs:{list:{description:"List"}},outputs:{reversed:{description:"Reversed list"}},run:({list:e},{reversed:t})=>t.next(e.reverse())},t.LoopList={id:"Loop List",defaultStyle:{icon:"fa-list"},namespace:i,searchKeywords:["each","spread"],description:"Emits all values in a list",inputs:{list:{description:"The list to loop"}},outputs:{item:{description:"Will emit a value for each item in the list"},index:{description:"Will emit the index of the item"},length:{description:"Will emit the length of the list"}},run:(e,t)=>{const{list:i}=e,{item:n,index:s}=t;for(const o of i)n.next(o),s.next(i.indexOf(o));t.length.next(i.length)}},t.HeadAndRest={id:"Head and rest",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list and emits two outputs: the first item and the rest of the list",inputs:{list:{description:"The list"}},outputs:{head:{description:"The first item in the list"},rest:{description:"The rest of the list"}},run:(e,t)=>{const{list:i}=e,{head:n,rest:s}=t;n.next(i[0]),s.next(i.slice(1))}},t.SplitTuple={id:"Split Pair",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 2 items and emits two outputs: the first item and the second item",inputs:{pair:{description:"The pair to split"}},outputs:{item1:{description:"The first item in the pair"},item2:{description:"The second item in the pair"}},run:(e,t)=>{const{pair:i}=e,{item1:n,item2:s}=t;n.next(i[0]),s.next(i[1])}},t.SplitTriple={id:"Split Triple",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 3 items and emits three outputs: the first item, the second item and the third item",inputs:{triple:{description:"The triple"}},outputs:{item1:{description:"The first item in the triple"},item2:{description:"The second item in the triple"},item3:{description:"The third item in the triple"}},run:(e,t)=>{const{list:i}=e,{item1:n,item2:s,item3:o}=t;n.next(i[0]),s.next(i[1]),o.next(i[2])}},t.SplitQuadruple={id:"Split Quadruple",defaultStyle:{icon:"fa-list"},namespace:i,description:"Receives a list with 4 items and emits four outputs: the first item, the second item, the third item and the fourth item",inputs:{quadruple:{description:"The quadruple"}},outputs:{item1:{description:"The first item in the quadruple"},item2:{description:"The second item in the quadruple"},item3:{description:"The third item in the quadruple"},item4:{description:"The fourth item in the quadruple"}},run:(e,t)=>{const{list:i}=e,{item1:n,item2:s,item3:o,item4:a}=t;n.next(i[0]),s.next(i[1]),o.next(i[2]),a.next(i[3])}},t.AccumulateValuesUntilTrigger={id:"Accumulate Values by Trigger",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input, until the "reset" input is triggered. Then it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},reset:{description:"Resets the accumulator"}},reactiveInputs:["value","reset"],outputs:{accumulated:{description:"The accumulated values"}},run:(e,t,i)=>{const{item:n,until:s}=e,{r:o}=t,{state:a}=i;let r=a.get("list")||[];void 0!==n&&(r.push(n),a.set("list",r)),void 0!==s&&o.next(r)}},t.AccumulateValuesByTime={id:"Accumulate Values by Time",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input. After the specified time it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},time:{description:"Time to wait before emitting the accumulated values. Default is 200ms",defaultValue:200,mode:"required-if-connected"}},reactiveInputs:["value"],outputs:{accumulated:{description:"The accumulated values"}},run:(e,t,i)=>{const{value:n,time:s}=e,{accumulated:o}=t,{state:a}=i;let r=a.get("list")||[];const u=Date.now()%1e3;console.log("called",e.value,e.time,u),a.set("bob",2),console.log(Array.from(a.entries())),void 0!==n&&(r.push(n),a.set("list",r)),a.get("timeout")&&clearTimeout(a.get("timeout"));const d=new Promise((e=>{a.set("resolve",e)}));return a.set("timeout",setTimeout((()=>{console.log("emitting",r,u,Date.now()%1e3),o.next(r),a.set("list",[]);const e=a.get("resolve");if(!e)throw new Error("resolve is undefined");e()}),s)),d}},t.AccumulateValuesByCount={id:"Accumulate Values by Count",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "value" input. After the specified count it emits the accumulated values and resets the accumulator.',inputs:{value:{description:"The value to accumulate"},count:{description:"Number of values to accumulate before emitting them"}},reactiveInputs:["value"],outputs:{accumulated:{description:"The accumulated values"}},completionOutputs:["accumulated"],run:(e,t,i)=>{const{value:n,count:s}=e,{accumulated:o}=t,{state:a}=i;let r=a.get("list")||[];void 0!==n&&(r.push(n),a.set("list",r)),r.length>=s&&o.next(r)}},t.AccumulateSomeValuesByCount={id:"Accumulate Some Values by Count",defaultStyle:{icon:"fa-basket-shopping"},namespace:i,description:'Accumulates values sent to the "accept" input. Emits the list after the total items passed to both "accept" and "ignore" inputs reach the specified count.',inputs:{accept:{description:"Values to accumulate"},ignore:{description:"Values to ignore"},count:{description:"Number of values to accumulate before emitting them"}},reactiveInputs:["accept","ignore"],outputs:{accumulated:{description:"The accumulated accepted values"},ignored:{description:"The accumulated ignored values"}},run:(e,t,i)=>{const{accept:n,ignore:s,count:o}=e,{accumulated:a,ignored:r}=t,{state:u}=i;let d=u.get("list")||[],c=u.get("ignored")||[];void 0!==n&&(d.push(n),u.set("list",d)),void 0!==s&&(c.push(s),u.set("ignored",r)),d.length+c.length>=o&&(a.next(d),r.next(r))}},t.Append={id:"Append",namespace:i,description:"Appends an item to a list",inputs:{list:{description:"The list"},item:{description:"The item to append"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next([...e,t])},defaultStyle:{icon:"fa-plus"}},t.Prepend={id:"Prepend",namespace:i,description:"Prepends an item to a list",inputs:{list:{description:"The list"},item:{description:"The item to prepend"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next([t,...e])},defaultStyle:{icon:"fa-arrow-up"}},t.Remove={id:"Remove",namespace:i,description:"Removes an item from a list",inputs:{list:{description:"The list"},item:{description:"The item to remove"}},outputs:{list:{description:"The resulting list"}},run:({list:e,item:t},{list:i})=>{i.next(e.filter((e=>e!==t)))},defaultStyle:{icon:"fa-minus"}},t.RemoveAt={id:"Remove At",namespace:i,description:"Removes an item from a list at the specified index",inputs:{list:{description:"The list"},index:{description:"The index of the item to remove"}},outputs:{list:{description:"The resulting list"}},run:({list:e,index:t},{list:i})=>{i.next(e.filter(((e,i)=>i!==t)))},defaultStyle:{icon:"fa-times"}},t.Slice={id:"Slice",namespace:i,description:"Returns a slice of a list from the specified start index to the specified end index",inputs:{list:{description:"The list"},start:{description:"The index to start slicing from"},end:{description:"The index to end slicing at"}},outputs:{list:{description:"The resulting list"}},run:({list:e,start:t,end:i},{list:n})=>{n.next(e.slice(t,i))},defaultStyle:{icon:"fa-cut"}},t.Flatten={id:"Flatten",namespace:i,description:"Flattens a list of lists into a single list",inputs:{list:{description:"The list of lists"}},outputs:{list:{description:"The resulting list"}},run:({list:e},{list:t})=>{t.next(e.reduce(((e,t)=>[...e,...t]),[]))},defaultStyle:{icon:"fa-compress"}}},16610:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SumList=t.LessThanOrEqual=t.LessThan=t.GreaterThanOrEqual=t.GreaterThan=t.ToPrecision=t.ToExponential=t.ToFixed=t.ParseFloat=t.ParseInt=t.Max=t.Min=t.Cos=t.Sin=t.Truncate=t.Round=t.Ceiling=t.Floor=t.AbsoluteValue=t.SquareRoot=t.Power=t.Modulo=t.Divide=t.Multiply=t.Subtract=t.Add=void 0;const i="Numbers";t.Add={id:"Add",defaultStyle:{icon:"fa-plus"},namespace:i,description:"Emits the sum of two numbers",inputs:{n1:{description:"First number to add"},n2:{description:"Second number to add"}},outputs:{sum:{description:"The sum of n1 and n2"}},run:({n1:e,n2:t},{sum:i})=>i.next(e+t)},t.Subtract={id:"Subtract",defaultStyle:{icon:"fa-minus"},namespace:i,description:"Emits the difference of two numbers",inputs:{n1:{description:"First number to subtract"},n2:{description:"Second number to subtract"}},outputs:{difference:{description:"The difference of n1 and n2"}},run:({n1:e,n2:t},{difference:i})=>i.next(e-t)},t.Multiply={id:"Multiply",defaultStyle:{icon:"fa-times"},namespace:i,description:"Emits the product of two numbers",inputs:{n1:{description:"First number to multiply"},n2:{description:"Second number to multiply"}},outputs:{product:{description:"The product of n1 and n2"}},run:({n1:e,n2:t},{product:i})=>i.next(e*t)},t.Divide={id:"Divide",defaultStyle:{icon:"fa-divide"},namespace:i,description:"Emits the quotient of two numbers",inputs:{n1:{description:"First number to divide"},n2:{description:"Second number to divide"}},outputs:{quotient:{description:"The quotient of n1 and n2"}},run:({n1:e,n2:t},{quotient:i})=>i.next(e/t)},t.Modulo={id:"Modulo",defaultStyle:{icon:"fa-percentage"},namespace:i,description:"Emits the remainder of two numbers",inputs:{n1:{description:"First number to divide"},n2:{description:"Second number to divide"}},outputs:{remainder:{description:"The remainder of n1 and n2"}},run:({n1:e,n2:t},{remainder:i})=>i.next(e%t)},t.Power={id:"Power",defaultStyle:{icon:"fa-superscript"},namespace:i,description:"Emits the power of two numbers",inputs:{n1:{description:"Base number"},n2:{description:"Exponent"}},outputs:{power:{description:"The power of n1 and n2"}},run:({n1:e,n2:t},{power:i})=>i.next(Math.pow(e,t))},t.SquareRoot={id:"Square Root",defaultStyle:{icon:"fa-square-root-alt"},namespace:i,description:"Emits the square root of a number",inputs:{n:{description:"Number to take the square root of"}},outputs:{root:{description:"The square root of n"}},run:({n:e},{root:t})=>t.next(Math.sqrt(e))},t.AbsoluteValue={id:"Absolute Value",defaultStyle:{icon:"fa-abs"},namespace:i,description:"Emits the absolute value of a number",inputs:{n:{description:"Number to take the absolute value of"}},outputs:{absolute:{description:"The absolute value of n"}},run:({n:e},{absolute:t})=>t.next(Math.abs(e))},t.Floor={id:"Floor",defaultStyle:{icon:"fa-floor"},namespace:i,description:"Emits the floor of a number",inputs:{n:{description:"Number to take the floor of"}},outputs:{floor:{description:"The floor of n"}},run:({n:e},{floor:t})=>t.next(Math.floor(e))},t.Ceiling={id:"Ceiling",defaultStyle:{icon:"fa-ceiling"},namespace:i,description:"Emits the ceiling of a number",inputs:{n:{description:"Number to take the ceiling of"}},outputs:{ceiling:{description:"The ceiling of n"}},run:({n:e},{ceiling:t})=>t.next(Math.ceil(e))},t.Round={id:"Round",defaultStyle:{icon:"fa-round"},namespace:i,description:"Emits the rounded value of a number",inputs:{n:{description:"Number to round"}},outputs:{rounded:{description:"The rounded value of n"}},run:({n:e},{rounded:t})=>t.next(Math.round(e))},t.Truncate={id:"Truncate",defaultStyle:{icon:"fa-truncate"},namespace:i,description:"Emits the truncated value of a number",inputs:{n:{description:"Number to truncate"}},outputs:{truncated:{description:"The truncated value of n"}},run:({n:e},{truncated:t})=>t.next(Math.trunc(e))},t.Sin={id:"Sin",defaultStyle:{icon:"fa-sin"},namespace:i,description:"Emits the sine of an angle",inputs:{angle:{description:"Angle in radians"}},outputs:{sine:{description:"The sine of angle"}},run:({angle:e},{sine:t})=>t.next(Math.sin(e))},t.Cos={id:"Cos",defaultStyle:{icon:"fa-cos"},namespace:i,description:"Emits the cosine of an angle",inputs:{angle:{description:"Angle in radians"}},outputs:{cosine:{description:"The cosine of angle"}},run:({angle:e},{cosine:t})=>t.next(Math.cos(e))},t.Min={id:"Min",namespace:i,description:"Emits the minimum of two numbers",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{min:{description:"The minimum of n1 and n2"}},run:({n1:e,n2:t},{min:i})=>i.next(Math.min(e,t))},t.Max={id:"Max",namespace:i,description:"Emits the maximum of two numbers",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{max:{description:"The maximum of n1 and n2"}},run:({n1:e,n2:t},{max:i})=>i.next(Math.max(e,t))},t.ParseInt={id:"Parse Int",namespace:i,description:"Emits the integer value of a string",inputs:{str:{description:"String to parse"}},outputs:{int:{description:"The integer value of str"}},run:({str:e},{int:t})=>t.next(parseInt(e))},t.ParseFloat={id:"Parse Float",namespace:i,description:"Emits the float value of a string",inputs:{str:{description:"String to parse"}},outputs:{float:{description:"The float value of str"}},run:({str:e},{float:t})=>t.next(parseFloat(e))},t.ToFixed={id:"To Fixed",namespace:i,description:"Emits the specified number of decimal places of a number",inputs:{number:{description:"Number to format"},places:{description:"Number of decimal places to format to"}},outputs:{fixed:{description:"The number with the specified number of decimal places"}},run:({number:e,places:t},{fixed:i})=>i.next(e.toFixed(t))},t.ToExponential={id:"To Exponential",namespace:i,description:"Emits the specified number of decimal places of a number in exponential notation",inputs:{number:{description:"Number to format"},places:{description:"Number of decimal places to format to"}},outputs:{exponential:{description:"The number with the specified number of decimal places in exponential notation"}},run:({number:e,places:t},{exponential:i})=>i.next(e.toExponential(t))},t.ToPrecision={id:"To Precision",namespace:i,description:"Emits the specified number of significant figures of a number",inputs:{number:{description:"Number to format"},places:{description:"Number of significant figures to format to"}},outputs:{precision:{description:"The number with the specified number of significant figures"}},run:({number:e,places:t},{precision:i})=>i.next(e.toPrecision(t))},t.GreaterThan={id:"Greater Than",namespace:i,description:"Emits true if the first number is greater than the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is greater than n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e>t)},t.GreaterThanOrEqual={id:"Greater Than Or Equal",namespace:i,description:"Emits true if the first number is greater than or equal to the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is greater than or equal to n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e>=t)},t.LessThan={id:"Less Than",namespace:i,description:"Emits true if the first number is less than the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is less than n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e<t)},t.LessThanOrEqual={id:"Less Than Or Equal",namespace:i,description:"Emits true if the first number is less than or equal to the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is less than or equal to n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e<=t)},t.SumList={id:"Sum List",defaultStyle:{icon:"fa-plus"},namespace:i,description:"Emits the sum of a list of numbers",inputs:{list:{description:"List of numbers"}},outputs:{sum:{description:"The sum of the numbers in list"}},run:({list:e},{sum:t})=>t.next(e.reduce(((e,t)=>e+t),0))}},32331:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PropertyEquals=t.DeleteAttribute=t.SetAttribute=t.GetAttribute=t.ObjectAssign=t.ObjectFromEntries=t.ObjectEntries=t.ObjectValues=t.ObjectKeys=t.JSONStringify=t.JSONParse=void 0;const i="Objects";t.JSONParse={id:"JSON Parse",defaultStyle:{icon:"fa-glasses"},namespace:i,description:"Parses a JSON string into an object",inputs:{json:{description:"JSON string to parse"}},outputs:{object:{description:"The parsed object"}},run:({json:e},{object:t})=>t.next(JSON.parse(e))},t.JSONStringify={id:"JSON Stringify",defaultStyle:{icon:"fa-pen-fancy"},namespace:i,description:"Stringifies an object into a JSON string",inputs:{object:{description:"Object to stringify"}},outputs:{json:{description:"The stringified JSON"}},run:({object:e},{json:t})=>t.next(JSON.stringify(e))},t.ObjectKeys={id:"Keys",defaultStyle:{icon:"fa-key"},namespace:i,description:"Emits the keys of an object",inputs:{object:{description:"Object to get keys of"}},outputs:{keys:{description:"The keys of object"}},run:({object:e},{keys:t})=>t.next(Object.keys(e))},t.ObjectValues={id:"Values",namespace:i,description:"Emits the values of an object",inputs:{object:{description:"Object to get values of"}},outputs:{values:{description:"The values of object"}},run:({object:e},{values:t})=>t.next(Object.values(e))},t.ObjectEntries={id:"Entries",defaultStyle:{icon:"fa-box"},namespace:i,description:"Emits the entries of an object",inputs:{object:{description:"Object to get entries of"}},outputs:{entries:{description:"The entries of object"}},run:({object:e},{entries:t})=>t.next(Object.entries(e))},t.ObjectFromEntries={id:"From Entries",namespace:i,defaultStyle:{icon:"fa-box"},description:"Creates an object from an array of entries",inputs:{entries:{description:"Array of entries to create object from"}},outputs:{object:{description:"The created object"}},run:({entries:e},{object:t})=>t.next(Object.fromEntries(e))},t.ObjectAssign={id:"Assign",namespace:i,defaultStyle:{icon:"fa-box"},description:"Assigns properties from one or more objects to a target object",inputs:{target:{description:"Target object to assign properties to"},sources:{description:"One or more objects to assign properties from"}},outputs:{object:{description:"The target object"}},run:({target:e,sources:t},{object:i})=>i.next(Object.assign(e,...t))},t.GetAttribute={id:"Get Attribute",searchKeywords:["pick","dot"],namespace:i,defaultStyle:{icon:"fa-magnifying-glass"},description:"Gets an attribute from an object",inputs:{object:{description:"Object to get attribute from"},attribute:{description:"Attribute to get"}},outputs:{value:{description:"The value of the attribute"}},customViewCode:'<% if (inputs.attribute) { %> Get "<%- inputs.attribute %>"<% } else { %> Get Attribute <% } %>',run:({object:e,attribute:t},{value:i})=>i.next(t.split(".").reduce(((e,t)=>e[t]),e))},t.SetAttribute={id:"Set Attribute",searchKeywords:["dot"],namespace:i,defaultStyle:{icon:"fa-box"},description:"Sets an attribute on an object",inputs:{object:{description:"Object to set attribute on"},attribute:{description:"Attribute to set"},value:{description:"Value to set attribute to"}},outputs:{object:{description:"The object with the attribute set"}},customViewCode:'<% if (inputs.attribute) { %> Set "<%- inputs.attribute %>"<% } else { %> Set Attribute <% } %>',run:({object:e,attribute:t,value:i},{object:n})=>{const s=t.split("."),o=s.pop();return s.reduce(((e,t)=>e[t]),e)[o]=i,n.next(e)}},t.DeleteAttribute={id:"Delete Attribute",defaultStyle:{icon:"fa-box"},namespace:i,description:"Deletes an attribute from an object",inputs:{object:{description:"Object to delete attribute from"},attribute:{description:"Attribute to delete"}},customViewCode:'<% if (inputs.attribute?.value) { %> Delete "<%- inputs.attribute.value %>"<% } else { %> Delete Attribute <% } %>',outputs:{object:{description:"The object with the attribute deleted"}},run:({object:e,attribute:t},{object:i})=>{const n=t.value.split("."),s=n.pop();delete n.reduce(((e,t)=>e[t]),e.value)[s],i.next(e.value)}},t.PropertyEquals={id:"Property Equals",namespace:i,defaultStyle:{icon:"fa-equals"},description:'Emits the object to the "true" output if an object\'s property equals a value, otherwise emits to the "false" output',inputs:{object:{description:"Object to check property of"},attribute:{description:"Attribute to check"},value:{description:"Value to check attribute against"}},outputs:{true:{description:"Emitted if the attribute equals the value"},false:{description:"Emitted if the attribute does not equal the value"}},customViewCode:'<% if (inputs.attribute) { %> "<%- inputs.attribute %>" equals "<%- inputs.value %>"<% } else { %> Property Equals <% } %>',run:(e,t)=>{e.attribute.split(".").reduce(((e,t)=>e[t]),e.object)===e.value?t.true.next(e.object):t.false.next(e.object)}}},59921:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GetGlobalState=t.SetGlobalState=void 0;const i="State";t.SetGlobalState={id:"Set Global State",namespace:i,description:"Sets a value in the global state",inputs:{key:{description:"Key to set"},value:{description:"Value to set"}},outputs:{setValue:{description:"Value that was set"}},run:({key:e,value:t},{setValue:i},{globalState:n})=>{n.set(e,t),i.next(t)}},t.GetGlobalState={id:"Get Global State",namespace:i,description:"Gets a value from the global state",inputs:{key:{description:"Key to get"},defaultValue:{description:"Default value if key is not set",mode:"required-if-connected"}},outputs:{value:{description:"Value of the key"}},run:({key:e,defaultValue:t},{value:i},{globalState:n,onError:s})=>{var o;void 0===n.get(e)&&void 0===t?s(new Error(`Key ${e} is not set`)):i.next(null!==(o=n.get(e))&&void 0!==o?o:t)}}},70094:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyString=t.MatchRegex=t.IsEmpty=t.EndsWith=t.StartsWith=t.Includes=t.ToTitleCase=t.ToSnakeCase=t.ToPascalCase=t.ToCamelCase=t.ToKebabCase=t.CharAt=t.LastIndexOf=t.IndexOf=t.Length=t.Substring=t.ToUpperCase=t.ToLowerCase=t.Trim=t.Replace=t.Join=t.Split=t.Concat=void 0;const i="Strings";t.Concat={id:"Concat",defaultStyle:{icon:"fa-font"},namespace:i,description:"Concatenates two strings",inputs:{a:{description:"String a"},b:{description:"String b"}},outputs:{value:{description:"Concatenated value"}},run:({a:e,b:t},{value:i})=>i.next(e+t)},t.Split={id:"Split",defaultStyle:{icon:"fa-font"},namespace:i,description:"Splits a string",inputs:{string:{description:"String to split"},separator:{description:"Separator"}},outputs:{value:{description:"Splitted value"}},run:({string:e,separator:t},{value:i})=>i.next(e.split(t))},t.Join={id:"Join",defaultStyle:{icon:"fa-font"},namespace:i,description:"Joins an array of strings",inputs:{array:{description:"Array to join"},separator:{description:"Separator"}},outputs:{value:{description:"Joined value"}},run:({array:e,separator:t},{value:i})=>i.next(e.join(t))},t.Replace={id:"Replace",defaultStyle:{icon:"fa-font"},namespace:i,description:"Replaces a string",inputs:{string:{description:"String to replace"},searchValue:{description:"Value to search for"},replaceValue:{description:"Value to replace with"}},outputs:{value:{description:"Replaced value"}},run:({string:e,searchValue:t,replaceValue:i},{value:n})=>n.next(e.replace(t,i))},t.Trim={id:"Trim",defaultStyle:{icon:"fa-font"},namespace:i,description:"Trims a string",inputs:{string:{description:"String to trim"}},outputs:{value:{description:"Trimmed value"}},run:({string:e},{value:t})=>t.next(e.trim())},t.ToLowerCase={id:"To Lower Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to lower case",inputs:{string:{description:"String to convert to lower case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.toLowerCase())},t.ToUpperCase={id:"To Upper Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to upper case",inputs:{string:{description:"String to convert to upper case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.toUpperCase())},t.Substring={id:"Substring",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the part of the string between the start and end indexes",inputs:{string:{description:"String to get substring from"},start:{description:"Start index"},end:{description:"End index"}},outputs:{value:{description:"Substring"}},run:({string:e,start:t,end:i},{value:n})=>n.next(e.substring(t,i))},t.Length={id:"Length",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the length of a string",inputs:{string:{description:"String to get length from"}},outputs:{value:{description:"Length"}},run:({string:e},{value:t})=>t.next(e.length)},t.IndexOf={id:"Index Of",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Index"}},run:({string:e,searchValue:t,fromIndex:i},{value:n})=>n.next(e.indexOf(t,i))},t.LastIndexOf={id:"Last Index Of",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Index"}},run:({string:e,searchValue:t,fromIndex:i},{value:n})=>n.next(e.lastIndexOf(t,i))},t.CharAt={id:"Char At",defaultStyle:{icon:"fa-font"},namespace:i,description:"Returns the character at the specified index",inputs:{string:{description:"String to get character from"},index:{description:"Index to get character from"}},outputs:{value:{description:"Character"}},run:({string:e,index:t},{value:i})=>i.next(e.charAt(t))},t.ToKebabCase={id:"To Kebab Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to kebab case",inputs:{string:{description:"String to convert to kebab case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/\s+/g,"-").toLowerCase())},t.ToCamelCase={id:"To Camel Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to camel case",inputs:{string:{description:"String to convert to camel case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/(?:^\w|[A-Z]|\b\w|\s+)/g,((e,t)=>0==+e?"":0===t?e.toLowerCase():e.toUpperCase())))},t.ToPascalCase={id:"To Pascal Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to pascal case",inputs:{string:{description:"String to convert to pascal case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/(?:^\w|[A-Z]|\b\w)/g,((e,t)=>0===t?e.toUpperCase():e.toLowerCase())).replace(/\s+/g,""))},t.ToSnakeCase={id:"To Snake Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to snake case",inputs:{string:{description:"String to convert to snake case"}},outputs:{value:{description:"Converted value"}},run:e=>e.replace(/([a-z])([A-Z])/g,"$1_$2").replace(/\s+/g,"_").toLowerCase()},t.ToTitleCase={id:"To Title Case",defaultStyle:{icon:"fa-font"},namespace:i,description:"Converts a string to title case",inputs:{string:{description:"String to convert to title case"}},outputs:{value:{description:"Converted value"}},run:({string:e},{value:t})=>t.next(e.replace(/\w\S*/g,(e=>e.charAt(0).toUpperCase()+e.substr(1).toLowerCase())))},t.Includes={id:"Includes",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether one string may be found within another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:({string:e,searchValue:t,fromIndex:i},{value:n})=>n.next(e.includes(t,i))},t.StartsWith={id:"Starts With",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string begins with the characters of another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:({string:e,searchValue:t,fromIndex:i},{value:n})=>n.next(e.startsWith(t,i))},t.EndsWith={id:"Ends With",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string ends with the characters of another string, returning true or false as appropriate",inputs:{string:{description:"String to search in"},searchValue:{description:"Value to search for"},fromIndex:{description:"Index to start searching from"}},outputs:{value:{description:"Result"}},run:(e,t,i)=>e.endsWith(t,i)},t.IsEmpty={id:"Is Empty",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string is empty",inputs:{string:{description:"String to check"}},outputs:{value:{description:"Result"}},run:({string:e},{value:t})=>t.next(0===e.length)},t.MatchRegex={id:"Match Regex",namespace:i,defaultStyle:{icon:"fa-font"},description:"Determines whether a string matches a regular expression",inputs:{string:{description:"String to check"},regex:{description:"Regular expression to match"}},outputs:{value:{description:"Result"}},run:({string:e,regex:t},{value:i})=>i.next(e.match(t))},t.EmptyString={id:"Empty String",namespace:i,defaultStyle:{icon:"fa-font",size:"small"},description:"Creates an empty string",inputs:{},outputs:{string:{description:"The empty string"}},run:({},{string:e})=>e.next("")}},88299:function(e,t,i){var n=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i);var s=Object.getOwnPropertyDescriptor(t,i);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,n,s)}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),s=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||n(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),s(i(73977),t),s(i(32331),t),s(i(16610),t),s(i(70094),t),s(i(15379),t),s(i(25733),t),s(i(7361),t),s(i(76773),t),s(i(59921),t)}}]);