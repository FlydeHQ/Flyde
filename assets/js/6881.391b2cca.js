"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6881],{15379:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Equals=t.EqualsBoolean=t.Throttle=t.ThrottleError=t.Debounce=t.Interval=t.Delay=t.Switch4=t.Switch2=t.Switch3=t.EmitOnTrigger=t.BooleanSplit=t.Subscribe=t.Publish=t.RoundRobin4=t.RoundRobin2=t.RoundRobin3=t.LimitTimes=void 0;const n=i(11253),o="Control Flow";t.LimitTimes={id:"Limit Times",namespace:o,description:"Item will be emitted until the limit is reached",inputs:{item:{mode:"required",description:"The item to emit"},times:{mode:"required",description:"The number of times to emit the item"},reset:{mode:"optional",description:"Reset the counter"}},outputs:{ok:{}},reactiveInputs:["item","reset"],completionOutputs:[],run:function(e,t,i){const{state:n}=i,{item:o,times:u,reset:s}=e,{ok:r}=t;if(void 0!==s)return void n.set("val",0);let a=n.get("val")||0;a++,n.set("val",a),a>=u?i.onError(new Error(`Limit of ${u} reached`)):r.next(o)}},t.RoundRobin3={id:"Round Robin 3",namespace:o,description:"Item will be emitted to one of the three outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'},r3:{description:'The third output in order to emit the value received. After emitting a value, it moves back to "r1"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:o,r2:u,r3:s}=t,r=n.get("curr")||0,a=(r+1)%3;[o,u,s][r].next(e.item),n.set("curr",a)}},t.RoundRobin2={namespace:o,id:"Round Robin 2",description:"Item will be emitted to one of the 2 outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:o,r2:u}=t,s=n.get("curr")||0,r=(s+1)%2;[o,u][s].next(e.item),n.set("curr",r)}},t.RoundRobin4={id:"Round Robin 4",namespace:o,description:"Item will be emitted to one of the 4 outputs in a round robin fashion",inputs:{value:{mode:"required",description:"The value to emit"}},outputs:{r1:{description:'The first output in order to emit the value received. After emitting a value, it moves to "r2"\'s turn.'},r2:{description:'The second output in order to emit the value received. After emitting a value, it moves to "r3"\'s turn.'},r3:{description:'The third output in order to emit the value received. After emitting a value, it moves to "r4"\'s turn.'},r4:{description:'The fourth output in order to emit the value received. After emitting a value, it moves back to "r1"\'s turn.'}},completionOutputs:[],reactiveInputs:["value"],run:function(e,t,i){const{state:n}=i,{r1:o,r2:u,r3:s,r4:r}=t,a=n.get("curr")||0,d=(a+1)%4;[o,u,s,r][a].next(e.item),n.set("curr",d)}},t.Publish={id:"Publish",namespace:o,description:"Publishes a value by a key to all listeners in the current flow. Use 'Subscribe' to listen to events.",inputs:{key:{mode:"required",description:"A key to use to subscribe to values"},value:{mode:"required"}},outputs:{},run:function(e,t,i){const o=`${i.ancestorsInsIds}__${e.key}`;n.publish(o,e.value)}},t.Subscribe={id:"Subscribe",namespace:o,description:"Subscribes to a value published by a key. Use 'Publish' to publish values.",inputs:{key:{mode:"required",description:"A key to use to subscribe to values"},initial:{mode:"required-if-connected",description:"If passed will be published has the first value"}},completionOutputs:[],outputs:{value:{description:"The value published by the key"}},run:function(e,t,i){const{value:o}=t,u=`${i.ancestorsInsIds}__${e.key}`,s=n.subscribe(u,((e,t)=>{o.next(t)}));void 0!==e.initial&&o.next(e.initial),i.onCleanup((()=>{n.unsubscribe(s)}))}},t.BooleanSplit={namespace:o,id:"Boolean Split",description:"Splits a boolean value into two outputs",inputs:{value:{mode:"required",description:"Boolean value"},trueValue:{mode:"required-if-connected",description:"Value to emit if the input is true. Defaults to true"},falseValue:{mode:"required-if-connected",description:"Value to emit if the input is false. Defaults to false"}},outputs:{true:{description:"The value is true"},false:{description:"The value is false"}},run:function(e,t){const{true:i,false:n}=t,{value:o,trueValue:u,falseValue:s}=e;o?i.next(null==u||u):n.next(null!=s&&s)}},t.EmitOnTrigger={namespace:o,id:"Emit on Trigger",description:"Emits the value when the trigger input receives any value",inputs:{value:{mode:"required",description:"The value to emit"},trigger:{mode:"required",description:"The trigger to emit the value"}},outputs:{result:{description:"The value emitted"}},run:function(e,t){const{result:i}=t,{value:n,trigger:o}=e;void 0!==o&&i.next(n)}},t.Switch3={namespace:o,id:"Switch 3",description:"Switches between 3 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},thirdCase:{mode:"required",description:"The value to switch on for the third output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},third:{description:"The value emitted if the input value is equal to the third case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,third:o,default:u,outputValue:s}=t,{value:r,firstCase:a,secondCase:d,thirdCase:l}=e;r===a?i.next(null!=s?s:r):r===d?n.next(null!=s?s:r):r===l?o.next(null!=s?s:r):u.next(null!=s?s:r)}},t.Switch2={id:"Switch 2",description:"Switches between 2 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",namespace:o,inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,default:o,outputValue:u}=t,{value:s,firstCase:r,secondCase:a}=e;s===r?i.next(null!=u?u:s):s===a?n.next(null!=u?u:s):o.next(null!=u?u:s)}},t.Switch4={id:"Switch 4",description:"Switches between 4 outputs based on the input value. If the value is not equal to any of the cases, the default output is used.",namespace:o,inputs:{value:{mode:"required",description:"The value to switch on"},firstCase:{mode:"required",description:"The value to switch on for the first output"},secondCase:{mode:"required",description:"The value to switch on for the second output"},thirdCase:{mode:"required",description:"The value to switch on for the third output"},fourthCase:{mode:"required",description:"The value to switch on for the fourth output"},outputValue:{mode:"required-if-connected",description:"The value to emit on the output. Defaults to 'value'"}},outputs:{first:{description:"The value emitted if the input value is equal to the first case"},second:{description:"The value emitted if the input value is equal to the second case"},third:{description:"The value emitted if the input value is equal to the third case"},fourth:{description:"The value emitted if the input value is equal to the fourth case"},default:{description:"The value emitted if the input value is not equal to any of the cases"}},run:function(e,t){const{first:i,second:n,third:o,fourth:u,default:s,outputValue:r}=t,{value:a,firstCase:d,secondCase:l,thirdCase:c,fourthCase:p}=e;a===d?i.next(null!=r?r:a):a===l?n.next(null!=r?r:a):a===c?o.next(null!=r?r:a):a===p?u.next(null!=r?r:a):s.next(null!=r?r:a)}},t.Delay={id:"Delay",defaultStyle:{icon:"fa-clock"},searchKeywords:["timeout","wait","setTimeout"],namespace:o,description:"Delays a value",inputs:{value:{description:"Value to delay"},delay:{description:"Delay in milliseconds"}},outputs:{delayedValue:{description:"Delayed value"}},run:async({value:e,delay:t},{delayedValue:i})=>{await new Promise((e=>setTimeout(e,t))),i.next(e)}},t.Interval={id:"Interval",namespace:o,defaultStyle:{icon:"fa-clock"},description:"Emits a value every interval",inputs:{value:{description:"Value to emit"},interval:{description:"Interval in milliseconds"}},reactiveInputs:["value","interval"],outputs:{value:{description:"Emitted value"}},completionOutputs:[],run:(e,t,i)=>{i.state.get("timer")&&clearInterval(i.state.get("timer"));const n=setInterval((()=>{t.value.next(e.value)}),e.interval);i.state.set("timer",n),i.onCleanup((()=>{clearInterval(n)}))}},t.Debounce={id:"Debounce",namespace:o,inputs:{value:{mode:"required",description:"The data that needs to be debounced"},wait:{mode:"required",defaultValue:250,description:"Time (in millis) to wait until 'value' is emitted"}},outputs:{result:{description:"The debounced value"}},completionOutputs:["result"],reactiveInputs:["value"],description:'Emits the last value received after being idle for "wait" amount of milliseconds',run:function(e,t,i){const{value:n,wait:o}=e,{result:u}=t,s=i.state.get("timer");s&&clearTimeout(s);const r=setTimeout((()=>{u.next(n)}),o);i.state.set("timer",r),i.onCleanup((()=>{clearTimeout(s)}))}};class u extends Error{constructor(e){super("Throttle: Value dropped"),this.value=e}}t.ThrottleError=u,t.Throttle={id:"Throttle",namespace:o,inputs:{value:{mode:"required",description:"The data that needs to be throttled"},wait:{mode:"required",defaultValue:250,description:"Time (in millis) to wait until 'value' is emitted"}},outputs:{result:{description:"The throttled value"}},completionOutputs:["result"],reactiveInputs:["value"],description:'Emits the first value received after being idle for "wait" amount of milliseconds',run:function(e,t,i){const{value:n,wait:o}=e,{result:s}=t;if(i.state.get("timer"))i.onError(new u(n));else{s.next(n);const e=setTimeout((()=>{i.state.set("timer",null)}),o);i.state.set("timer",e)}}},t.EqualsBoolean={id:"Equals (Bool)",defaultStyle:{icon:"fa-equals"},namespace:o,description:"Emits true if two values are equal (=== equality). Otherwise emits false.",inputs:{a:{description:"First value"},b:{description:"Second value"}},outputs:{result:{description:"true if a is equal to b"}},run:({a:e,b:t},{result:i})=>i.next(e===t)},t.Equals={id:"Equals",namespace:o,description:'Emits the value of "a" to output "true" if "a" is equal to "b". Otherwise emits the value of "a" to output "false".',inputs:{a:{mode:"required",description:"First value"},b:{mode:"required",description:"Second value"}},outputs:{true:{description:"Emits the value of a if a is equal to b"},false:{description:"Emits the value of a if a is not equal to b"}},run:(e,t)=>{const{a:i,b:n}=e,{true:o,false:u}=t;i===n?o.next(i):u.next(i)}}},16610:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SumList=t.LessThanOrEqual=t.LessThan=t.GreaterThanOrEqual=t.GreaterThan=t.ToPrecision=t.ToExponential=t.ToFixed=t.ParseFloat=t.ParseInt=t.Max=t.Min=t.Cos=t.Sin=t.Truncate=t.Round=t.Ceiling=t.Floor=t.AbsoluteValue=t.SquareRoot=t.Power=t.Modulo=t.Divide=t.Multiply=t.Subtract=t.Add=void 0;const i="Numbers";t.Add={id:"Add",defaultStyle:{icon:"fa-plus"},namespace:i,description:"Emits the sum of two numbers",inputs:{n1:{description:"First number to add"},n2:{description:"Second number to add"}},outputs:{sum:{description:"The sum of n1 and n2"}},run:({n1:e,n2:t},{sum:i})=>i.next(e+t)},t.Subtract={id:"Subtract",defaultStyle:{icon:"fa-minus"},namespace:i,description:"Emits the difference of two numbers",inputs:{n1:{description:"First number to subtract"},n2:{description:"Second number to subtract"}},outputs:{difference:{description:"The difference of n1 and n2"}},run:({n1:e,n2:t},{difference:i})=>i.next(e-t)},t.Multiply={id:"Multiply",defaultStyle:{icon:"fa-times"},namespace:i,description:"Emits the product of two numbers",inputs:{n1:{description:"First number to multiply"},n2:{description:"Second number to multiply"}},outputs:{product:{description:"The product of n1 and n2"}},run:({n1:e,n2:t},{product:i})=>i.next(e*t)},t.Divide={id:"Divide",defaultStyle:{icon:"fa-divide"},namespace:i,description:"Emits the quotient of two numbers",inputs:{n1:{description:"First number to divide"},n2:{description:"Second number to divide"}},outputs:{quotient:{description:"The quotient of n1 and n2"}},run:({n1:e,n2:t},{quotient:i})=>i.next(e/t)},t.Modulo={id:"Modulo",defaultStyle:{icon:"fa-percentage"},namespace:i,description:"Emits the remainder of two numbers",inputs:{n1:{description:"First number to divide"},n2:{description:"Second number to divide"}},outputs:{remainder:{description:"The remainder of n1 and n2"}},run:({n1:e,n2:t},{remainder:i})=>i.next(e%t)},t.Power={id:"Power",defaultStyle:{icon:"fa-superscript"},namespace:i,description:"Emits the power of two numbers",inputs:{n1:{description:"Base number"},n2:{description:"Exponent"}},outputs:{power:{description:"The power of n1 and n2"}},run:({n1:e,n2:t},{power:i})=>i.next(Math.pow(e,t))},t.SquareRoot={id:"Square Root",defaultStyle:{icon:"fa-square-root-alt"},namespace:i,description:"Emits the square root of a number",inputs:{n:{description:"Number to take the square root of"}},outputs:{root:{description:"The square root of n"}},run:({n:e},{root:t})=>t.next(Math.sqrt(e))},t.AbsoluteValue={id:"Absolute Value",defaultStyle:{icon:"fa-abs"},namespace:i,description:"Emits the absolute value of a number",inputs:{n:{description:"Number to take the absolute value of"}},outputs:{absolute:{description:"The absolute value of n"}},run:({n:e},{absolute:t})=>t.next(Math.abs(e))},t.Floor={id:"Floor",defaultStyle:{icon:"fa-floor"},namespace:i,description:"Emits the floor of a number",inputs:{n:{description:"Number to take the floor of"}},outputs:{floor:{description:"The floor of n"}},run:({n:e},{floor:t})=>t.next(Math.floor(e))},t.Ceiling={id:"Ceiling",defaultStyle:{icon:"fa-ceiling"},namespace:i,description:"Emits the ceiling of a number",inputs:{n:{description:"Number to take the ceiling of"}},outputs:{ceiling:{description:"The ceiling of n"}},run:({n:e},{ceiling:t})=>t.next(Math.ceil(e))},t.Round={id:"Round",defaultStyle:{icon:"fa-round"},namespace:i,description:"Emits the rounded value of a number",inputs:{n:{description:"Number to round"}},outputs:{rounded:{description:"The rounded value of n"}},run:({n:e},{rounded:t})=>t.next(Math.round(e))},t.Truncate={id:"Truncate",defaultStyle:{icon:"fa-truncate"},namespace:i,description:"Emits the truncated value of a number",inputs:{n:{description:"Number to truncate"}},outputs:{truncated:{description:"The truncated value of n"}},run:({n:e},{truncated:t})=>t.next(Math.trunc(e))},t.Sin={id:"Sin",defaultStyle:{icon:"fa-sin"},namespace:i,description:"Emits the sine of an angle",inputs:{angle:{description:"Angle in radians"}},outputs:{sine:{description:"The sine of angle"}},run:({angle:e},{sine:t})=>t.next(Math.sin(e))},t.Cos={id:"Cos",defaultStyle:{icon:"fa-cos"},namespace:i,description:"Emits the cosine of an angle",inputs:{angle:{description:"Angle in radians"}},outputs:{cosine:{description:"The cosine of angle"}},run:({angle:e},{cosine:t})=>t.next(Math.cos(e))},t.Min={id:"Min",namespace:i,description:"Emits the minimum of two numbers",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{min:{description:"The minimum of n1 and n2"}},run:({n1:e,n2:t},{min:i})=>i.next(Math.min(e,t))},t.Max={id:"Max",namespace:i,description:"Emits the maximum of two numbers",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{max:{description:"The maximum of n1 and n2"}},run:({n1:e,n2:t},{max:i})=>i.next(Math.max(e,t))},t.ParseInt={id:"Parse Int",namespace:i,description:"Emits the integer value of a string",inputs:{str:{description:"String to parse"}},outputs:{int:{description:"The integer value of str"}},run:({str:e},{int:t})=>t.next(parseInt(e))},t.ParseFloat={id:"Parse Float",namespace:i,description:"Emits the float value of a string",inputs:{str:{description:"String to parse"}},outputs:{float:{description:"The float value of str"}},run:({str:e},{float:t})=>t.next(parseFloat(e))},t.ToFixed={id:"To Fixed",namespace:i,description:"Emits the specified number of decimal places of a number",inputs:{number:{description:"Number to format"},places:{description:"Number of decimal places to format to"}},outputs:{fixed:{description:"The number with the specified number of decimal places"}},run:({number:e,places:t},{fixed:i})=>i.next(e.toFixed(t))},t.ToExponential={id:"To Exponential",namespace:i,description:"Emits the specified number of decimal places of a number in exponential notation",inputs:{number:{description:"Number to format"},places:{description:"Number of decimal places to format to"}},outputs:{exponential:{description:"The number with the specified number of decimal places in exponential notation"}},run:({number:e,places:t},{exponential:i})=>i.next(e.toExponential(t))},t.ToPrecision={id:"To Precision",namespace:i,description:"Emits the specified number of significant figures of a number",inputs:{number:{description:"Number to format"},places:{description:"Number of significant figures to format to"}},outputs:{precision:{description:"The number with the specified number of significant figures"}},run:({number:e,places:t},{precision:i})=>i.next(e.toPrecision(t))},t.GreaterThan={id:"Greater Than",namespace:i,description:"Emits true if the first number is greater than the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is greater than n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e>t)},t.GreaterThanOrEqual={id:"Greater Than Or Equal",namespace:i,description:"Emits true if the first number is greater than or equal to the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is greater than or equal to n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e>=t)},t.LessThan={id:"Less Than",namespace:i,description:"Emits true if the first number is less than the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is less than n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e<t)},t.LessThanOrEqual={id:"Less Than Or Equal",namespace:i,description:"Emits true if the first number is less than or equal to the second",inputs:{n1:{description:"First number"},n2:{description:"Second number"}},outputs:{result:{description:"true if n1 is less than or equal to n2"}},run:({n1:e,n2:t},{result:i})=>i.next(e<=t)},t.SumList={id:"Sum List",defaultStyle:{icon:"fa-plus"},namespace:i,description:"Emits the sum of a list of numbers",inputs:{list:{description:"List of numbers"}},outputs:{sum:{description:"The sum of the numbers in list"}},run:({list:e},{sum:t})=>t.next(e.reduce(((e,t)=>e+t),0))}}}]);